//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 5/1/2016 11:01:12 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MtcModel", "FK_DIplomasUser_ID", "User", RelationshipMultiplicity.One, typeof(MtcModel.User), "Documents", RelationshipMultiplicity.Many, typeof(MtcModel.Document), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_StructureContentDocument_Id", "Document", RelationshipMultiplicity.One, typeof(MtcModel.Document), "StructureContents", RelationshipMultiplicity.Many, typeof(MtcModel.StructureContent), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_StructureElementDocument_Id", "StructureElement", RelationshipMultiplicity.One, typeof(MtcModel.StructureElement), "StructureContents", RelationshipMultiplicity.Many, typeof(MtcModel.StructureContent), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_TaskDocument_Id", "Document", RelationshipMultiplicity.One, typeof(MtcModel.Document), "Tasks", RelationshipMultiplicity.Many, typeof(MtcModel.Task), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_TaskUser_Id", "User", RelationshipMultiplicity.ZeroOrOne, typeof(MtcModel.User), "Tasks", RelationshipMultiplicity.Many, typeof(MtcModel.Task), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "Structureelement_Structureelement", "StructureElements1", RelationshipMultiplicity.Many, typeof(MtcModel.StructureElement), "StructureElements", RelationshipMultiplicity.Many, typeof(MtcModel.StructureElement))]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_DocumentMentor_ID", "User_MentorId", RelationshipMultiplicity.ZeroOrOne, typeof(MtcModel.User), "Documents_MentorId", RelationshipMultiplicity.Many, typeof(MtcModel.Document), true)]

#endregion

namespace MtcModel
{

    #region MtcEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MtcEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new MtcEntities object.
        /// </summary>
        public MtcEntities() : 
                base(@"name=MtcEntitiesConnectionString", "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new MtcEntities object using the connection string found in the 'MtcEntities' section of the application configuration file.
        /// </summary>
        public MtcEntities(string connectionString) : 
                base(connectionString, "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new MtcEntities object.
        /// </summary>
        public MtcEntities(EntityConnection connection) : base(connection, "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Document> Documents
        {
            get
            {
                if ((_Documents == null))
                {
                    _Documents = base.CreateObjectSet<Document>("Documents");
                }
                return _Documents;
            }
        }
        private ObjectSet<Document> _Documents;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StructureContent> StructureContents
        {
            get
            {
                if ((_StructureContents == null))
                {
                    _StructureContents = base.CreateObjectSet<StructureContent>("StructureContents");
                }
                return _StructureContents;
            }
        }
        private ObjectSet<StructureContent> _StructureContents;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StructureElement> StructureElements
        {
            get
            {
                if ((_StructureElements == null))
                {
                    _StructureElements = base.CreateObjectSet<StructureElement>("StructureElements");
                }
                return _StructureElements;
            }
        }
        private ObjectSet<StructureElement> _StructureElements;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Task> Tasks
        {
            get
            {
                if ((_Tasks == null))
                {
                    _Tasks = base.CreateObjectSet<Task>("Tasks");
                }
                return _Tasks;
            }
        }
        private ObjectSet<Task> _Tasks;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Documents EntitySet.
        /// </summary>
        public void AddToDocuments(Document document)
        {
            base.AddObject("Documents", document);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the StructureContents EntitySet.
        /// </summary>
        public void AddToStructureContents(StructureContent structureContent)
        {
            base.AddObject("StructureContents", structureContent);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the StructureElements EntitySet.
        /// </summary>
        public void AddToStructureElements(StructureElement structureElement)
        {
            base.AddObject("StructureElements", structureElement);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Tasks EntitySet.
        /// </summary>
        public void AddToTasks(Task task)
        {
            base.AddObject("Tasks", task);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion
    }

    #endregion
}

namespace MtcModel
{

    /// <summary>
    /// There are no comments for MtcModel.Document in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="Document")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Document : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Document object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="userId">Initial value of UserId.</param>
        /// <param name="deadline">Initial value of Deadline.</param>
        /// <param name="title">Initial value of Title.</param>
        public static Document CreateDocument(int iD, int userId, global::System.DateTime deadline, string title)
        {
            Document document = new Document();
            document.ID = iD;
            document.UserId = userId;
            document.Deadline = deadline;
            document.Title = title;
            return document;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int ID
        {
            get
            {
                int value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private int _ID;
        partial void OnGetID(ref int value);
        partial void OnIDChanging(ref int value);
        partial void OnIDChanged();
    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int UserId
        {
            get
            {
                int value = _UserId;
                OnGetUserId(ref value);
                return value;
            }
            set
            {
                if (_UserId != value)
                {
                  OnUserIdChanging(ref value);
                  ReportPropertyChanging("UserId");
                  _UserId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UserId");
                  OnUserIdChanged();
              }
            }
        }
        private int _UserId;
        partial void OnGetUserId(ref int value);
        partial void OnUserIdChanging(ref int value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// There are no comments for Deadline in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Deadline
        {
            get
            {
                global::System.DateTime value = _Deadline;
                OnGetDeadline(ref value);
                return value;
            }
            set
            {
                if (_Deadline != value)
                {
                  OnDeadlineChanging(ref value);
                  ReportPropertyChanging("Deadline");
                  _Deadline = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Deadline");
                  OnDeadlineChanged();
              }
            }
        }
        private global::System.DateTime _Deadline;
        partial void OnGetDeadline(ref global::System.DateTime value);
        partial void OnDeadlineChanging(ref global::System.DateTime value);
        partial void OnDeadlineChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for CurrentProgress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> CurrentProgress
        {
            get
            {
                global::System.Nullable<int> value = _CurrentProgress;
                OnGetCurrentProgress(ref value);
                return value;
            }
            set
            {
                if (_CurrentProgress != value)
                {
                  OnCurrentProgressChanging(ref value);
                  ReportPropertyChanging("CurrentProgress");
                  _CurrentProgress = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CurrentProgress");
                  OnCurrentProgressChanged();
              }
            }
        }
        private global::System.Nullable<int> _CurrentProgress;
        partial void OnGetCurrentProgress(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanging(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanged();
    
        /// <summary>
        /// There are no comments for MentorId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> MentorId
        {
            get
            {
                global::System.Nullable<int> value = _MentorId;
                OnGetMentorId(ref value);
                return value;
            }
            set
            {
                if (_MentorId != value)
                {
                  OnMentorIdChanging(ref value);
                  ReportPropertyChanging("MentorId");
                  _MentorId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MentorId");
                  OnMentorIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _MentorId;
        partial void OnGetMentorId(ref global::System.Nullable<int> value);
        partial void OnMentorIdChanging(ref global::System.Nullable<int> value);
        partial void OnMentorIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DIplomasUser_ID", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DIplomasUser_ID", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DIplomasUser_ID", "User").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DIplomasUser_ID", "User");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<User>("MtcModel.FK_DIplomasUser_ID", "User", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DIplomasUser_ID", "User").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for StructureContents in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureContentDocument_Id", "StructureContents")]
        public EntityCollection<StructureContent> StructureContents
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<StructureContent>("MtcModel.FK_StructureContentDocument_Id", "StructureContents");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<StructureContent>("MtcModel.FK_StructureContentDocument_Id", "StructureContents", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Tasks in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskDocument_Id", "Tasks")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Task>("MtcModel.FK_TaskDocument_Id", "Tasks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Task>("MtcModel.FK_TaskDocument_Id", "Tasks", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for User_MentorId in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentMentor_ID", "User_MentorId")]
        public User User_MentorId
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DocumentMentor_ID", "User_MentorId").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DocumentMentor_ID", "User_MentorId").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for User_MentorId in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User_MentorIdReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DocumentMentor_ID", "User_MentorId");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<User>("MtcModel.FK_DocumentMentor_ID", "User_MentorId", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_DocumentMentor_ID", "User_MentorId").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.StructureContent in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="StructureContent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StructureContent : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new StructureContent object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="structureElementId">Initial value of StructureElementId.</param>
        /// <param name="documentId">Initial value of DocumentId.</param>
        /// <param name="order">Initial value of Order.</param>
        public static StructureContent CreateStructureContent(int id, int structureElementId, int documentId, int order)
        {
            StructureContent structureContent = new StructureContent();
            structureContent.Id = id;
            structureContent.StructureElementId = structureElementId;
            structureContent.DocumentId = documentId;
            structureContent.Order = order;
            return structureContent;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for StructureElementId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int StructureElementId
        {
            get
            {
                int value = _StructureElementId;
                OnGetStructureElementId(ref value);
                return value;
            }
            set
            {
                if (_StructureElementId != value)
                {
                  OnStructureElementIdChanging(ref value);
                  ReportPropertyChanging("StructureElementId");
                  _StructureElementId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StructureElementId");
                  OnStructureElementIdChanged();
              }
            }
        }
        private int _StructureElementId;
        partial void OnGetStructureElementId(ref int value);
        partial void OnStructureElementIdChanging(ref int value);
        partial void OnStructureElementIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                byte[] value = _Content;
                OnGetContent(ref value);
                return value;
            }
            set
            {
                if (_Content != value)
                {
                  OnContentChanging(ref value);
                  ReportPropertyChanging("Content");
                  _Content = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Content");
                  OnContentChanged();
              }
            }
        }
        private byte[] _Content;
        partial void OnGetContent(ref byte[] value);
        partial void OnContentChanging(ref byte[] value);
        partial void OnContentChanged();
    
        /// <summary>
        /// There are no comments for DocumentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int DocumentId
        {
            get
            {
                int value = _DocumentId;
                OnGetDocumentId(ref value);
                return value;
            }
            set
            {
                if (_DocumentId != value)
                {
                  OnDocumentIdChanging(ref value);
                  ReportPropertyChanging("DocumentId");
                  _DocumentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentId");
                  OnDocumentIdChanged();
              }
            }
        }
        private int _DocumentId;
        partial void OnGetDocumentId(ref int value);
        partial void OnDocumentIdChanging(ref int value);
        partial void OnDocumentIdChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int Order
        {
            get
            {
                int value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private int _Order;
        partial void OnGetOrder(ref int value);
        partial void OnOrderChanging(ref int value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// There are no comments for CurrentProgress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> CurrentProgress
        {
            get
            {
                global::System.Nullable<int> value = _CurrentProgress;
                OnGetCurrentProgress(ref value);
                return value;
            }
            set
            {
                if (_CurrentProgress != value)
                {
                  OnCurrentProgressChanging(ref value);
                  ReportPropertyChanging("CurrentProgress");
                  _CurrentProgress = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CurrentProgress");
                  OnCurrentProgressChanged();
              }
            }
        }
        private global::System.Nullable<int> _CurrentProgress;
        partial void OnGetCurrentProgress(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanging(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureContentDocument_Id", "Document")]
        public Document Document
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_StructureContentDocument_Id", "Document").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_StructureContentDocument_Id", "Document").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Document> DocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_StructureContentDocument_Id", "Document");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Document>("MtcModel.FK_StructureContentDocument_Id", "Document", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_StructureContentDocument_Id", "Document").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for StructureElement in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureElementDocument_Id", "StructureElement")]
        public StructureElement StructureElement
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StructureElement>("MtcModel.FK_StructureElementDocument_Id", "StructureElement").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StructureElement>("MtcModel.FK_StructureElementDocument_Id", "StructureElement").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for StructureElement in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StructureElement> StructureElementReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StructureElement>("MtcModel.FK_StructureElementDocument_Id", "StructureElement");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StructureElement>("MtcModel.FK_StructureElementDocument_Id", "StructureElement", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StructureElement>("MtcModel.FK_StructureElementDocument_Id", "StructureElement").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.StructureElement in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="StructureElement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StructureElement : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new StructureElement object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="structureTypeId">Initial value of StructureTypeId.</param>
        public static StructureElement CreateStructureElement(int id, StructureElementType structureTypeId)
        {
            StructureElement structureElement = new StructureElement();
            structureElement.Id = id;
            structureElement.StructureTypeId = structureTypeId;
            return structureElement;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for StructureTypeId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public StructureElementType StructureTypeId
        {
            get
            {
                StructureElementType value = _StructureTypeId;
                OnGetStructureTypeId(ref value);
                return value;
            }
            set
            {
                if (_StructureTypeId != value)
                {
                  OnStructureTypeIdChanging(ref value);
                  ReportPropertyChanging("StructureTypeId");
                  _StructureTypeId = (StructureElementType)StructuralObject.SetValidValue((int)value);
                  ReportPropertyChanged("StructureTypeId");
                  OnStructureTypeIdChanged();
              }
            }
        }
        private StructureElementType _StructureTypeId;
        partial void OnGetStructureTypeId(ref StructureElementType value);
        partial void OnStructureTypeIdChanging(ref StructureElementType value);
        partial void OnStructureTypeIdChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for StructureContents in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureElementDocument_Id", "StructureContents")]
        public EntityCollection<StructureContent> StructureContents
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<StructureContent>("MtcModel.FK_StructureElementDocument_Id", "StructureContents");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<StructureContent>("MtcModel.FK_StructureElementDocument_Id", "StructureContents", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for StructureElements in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "Structureelement_Structureelement", "StructureElements")]
        public EntityCollection<StructureElement> StructureElements
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<StructureElement>("MtcModel.Structureelement_Structureelement", "StructureElements");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<StructureElement>("MtcModel.Structureelement_Structureelement", "StructureElements", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for StructureElements1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "Structureelement_Structureelement", "StructureElements1")]
        public EntityCollection<StructureElement> StructureElements1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<StructureElement>("MtcModel.Structureelement_Structureelement", "StructureElements1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<StructureElement>("MtcModel.Structureelement_Structureelement", "StructureElements1", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.Task in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="Task")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Task : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Task object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="state">Initial value of State.</param>
        /// <param name="deadline">Initial value of Deadline.</param>
        /// <param name="documentId">Initial value of DocumentId.</param>
        /// <param name="taskType">Initial value of TaskType.</param>
        /// <param name="isLocked">Initial value of IsLocked.</param>
        public static Task CreateTask(int id, string title, TaskState state, global::System.DateTime deadline, int documentId, TaskType taskType, sbyte isLocked)
        {
            Task task = new Task();
            task.Id = id;
            task.Title = title;
            task.State = state;
            task.Deadline = deadline;
            task.DocumentId = documentId;
            task.TaskType = taskType;
            task.IsLocked = isLocked;
            return task;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for AssignTo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> AssignTo
        {
            get
            {
                global::System.Nullable<int> value = _AssignTo;
                OnGetAssignTo(ref value);
                return value;
            }
            set
            {
                if (_AssignTo != value)
                {
                  OnAssignToChanging(ref value);
                  ReportPropertyChanging("AssignTo");
                  _AssignTo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("AssignTo");
                  OnAssignToChanged();
              }
            }
        }
        private global::System.Nullable<int> _AssignTo;
        partial void OnGetAssignTo(ref global::System.Nullable<int> value);
        partial void OnAssignToChanging(ref global::System.Nullable<int> value);
        partial void OnAssignToChanged();
    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public TaskState State
        {
            get
            {
                TaskState value = _State;
                OnGetState(ref value);
                return value;
            }
            set
            {
                if (_State != value)
                {
                  OnStateChanging(ref value);
                  ReportPropertyChanging("State");
                  _State = (TaskState)StructuralObject.SetValidValue((int)value);
                  ReportPropertyChanged("State");
                  OnStateChanged();
              }
            }
        }
        private TaskState _State;
        partial void OnGetState(ref TaskState value);
        partial void OnStateChanging(ref TaskState value);
        partial void OnStateChanged();
    
        /// <summary>
        /// There are no comments for Deadline in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Deadline
        {
            get
            {
                global::System.DateTime value = _Deadline;
                OnGetDeadline(ref value);
                return value;
            }
            set
            {
                if (_Deadline != value)
                {
                  OnDeadlineChanging(ref value);
                  ReportPropertyChanging("Deadline");
                  _Deadline = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Deadline");
                  OnDeadlineChanged();
              }
            }
        }
        private global::System.DateTime _Deadline;
        partial void OnGetDeadline(ref global::System.DateTime value);
        partial void OnDeadlineChanging(ref global::System.DateTime value);
        partial void OnDeadlineChanged();
    
        /// <summary>
        /// There are no comments for DocumentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int DocumentId
        {
            get
            {
                int value = _DocumentId;
                OnGetDocumentId(ref value);
                return value;
            }
            set
            {
                if (_DocumentId != value)
                {
                  OnDocumentIdChanging(ref value);
                  ReportPropertyChanging("DocumentId");
                  _DocumentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentId");
                  OnDocumentIdChanged();
              }
            }
        }
        private int _DocumentId;
        partial void OnGetDocumentId(ref int value);
        partial void OnDocumentIdChanging(ref int value);
        partial void OnDocumentIdChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Order
        {
            get
            {
                global::System.Nullable<int> value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private global::System.Nullable<int> _Order;
        partial void OnGetOrder(ref global::System.Nullable<int> value);
        partial void OnOrderChanging(ref global::System.Nullable<int> value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// There are no comments for TaskType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public TaskType TaskType
        {
            get
            {
                TaskType value = _TaskType;
                OnGetTaskType(ref value);
                return value;
            }
            set
            {
                if (_TaskType != value)
                {
                  OnTaskTypeChanging(ref value);
                  ReportPropertyChanging("TaskType");
                  _TaskType = (TaskType)StructuralObject.SetValidValue((int)value);
                  ReportPropertyChanged("TaskType");
                  OnTaskTypeChanged();
              }
            }
        }
        private TaskType _TaskType;
        partial void OnGetTaskType(ref TaskType value);
        partial void OnTaskTypeChanging(ref TaskType value);
        partial void OnTaskTypeChanged();
    
        /// <summary>
        /// There are no comments for IsLocked in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public sbyte IsLocked
        {
            get
            {
                sbyte value = _IsLocked;
                OnGetIsLocked(ref value);
                return value;
            }
            set
            {
                if (_IsLocked != value)
                {
                  OnIsLockedChanging(ref value);
                  ReportPropertyChanging("IsLocked");
                  _IsLocked = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsLocked");
                  OnIsLockedChanged();
              }
            }
        }
        private sbyte _IsLocked;
        partial void OnGetIsLocked(ref sbyte value);
        partial void OnIsLockedChanging(ref sbyte value);
        partial void OnIsLockedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskDocument_Id", "Document")]
        public Document Document
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_TaskDocument_Id", "Document").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_TaskDocument_Id", "Document").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Document in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Document> DocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_TaskDocument_Id", "Document");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Document>("MtcModel.FK_TaskDocument_Id", "Document", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Document>("MtcModel.FK_TaskDocument_Id", "Document").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskUser_Id", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_TaskUser_Id", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_TaskUser_Id", "User").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_TaskUser_Id", "User");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<User>("MtcModel.FK_TaskUser_Id", "User", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<User>("MtcModel.FK_TaskUser_Id", "User").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.User in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="firstName">Initial value of FirstName.</param>
        /// <param name="familyName">Initial value of FamilyName.</param>
        /// <param name="userName">Initial value of UserName.</param>
        /// <param name="email">Initial value of Email.</param>
        /// <param name="password">Initial value of Password.</param>
        public static User CreateUser(int id, string firstName, string familyName, string userName, string email, string password)
        {
            User user = new User();
            user.Id = id;
            user.FirstName = firstName;
            user.FamilyName = familyName;
            user.UserName = userName;
            user.Email = email;
            user.Password = password;
            return user;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                string value = _FirstName;
                OnGetFirstName(ref value);
                return value;
            }
            set
            {
                if (_FirstName != value)
                {
                  OnFirstNameChanging(ref value);
                  ReportPropertyChanging("FirstName");
                  _FirstName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("FirstName");
                  OnFirstNameChanged();
              }
            }
        }
        private string _FirstName;
        partial void OnGetFirstName(ref string value);
        partial void OnFirstNameChanging(ref string value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// There are no comments for MiddleName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string MiddleName
        {
            get
            {
                string value = _MiddleName;
                OnGetMiddleName(ref value);
                return value;
            }
            set
            {
                if (_MiddleName != value)
                {
                  OnMiddleNameChanging(ref value);
                  ReportPropertyChanging("MiddleName");
                  _MiddleName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("MiddleName");
                  OnMiddleNameChanged();
              }
            }
        }
        private string _MiddleName;
        partial void OnGetMiddleName(ref string value);
        partial void OnMiddleNameChanging(ref string value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// There are no comments for FamilyName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string FamilyName
        {
            get
            {
                string value = _FamilyName;
                OnGetFamilyName(ref value);
                return value;
            }
            set
            {
                if (_FamilyName != value)
                {
                  OnFamilyNameChanging(ref value);
                  ReportPropertyChanging("FamilyName");
                  _FamilyName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("FamilyName");
                  OnFamilyNameChanged();
              }
            }
        }
        private string _FamilyName;
        partial void OnGetFamilyName(ref string value);
        partial void OnFamilyNameChanging(ref string value);
        partial void OnFamilyNameChanged();
    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string UserName
        {
            get
            {
                string value = _UserName;
                OnGetUserName(ref value);
                return value;
            }
            set
            {
                if (_UserName != value)
                {
                  OnUserNameChanging(ref value);
                  ReportPropertyChanging("UserName");
                  _UserName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("UserName");
                  OnUserNameChanged();
              }
            }
        }
        private string _UserName;
        partial void OnGetUserName(ref string value);
        partial void OnUserNameChanging(ref string value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Password
        {
            get
            {
                string value = _Password;
                OnGetPassword(ref value);
                return value;
            }
            set
            {
                if (_Password != value)
                {
                  OnPasswordChanging(ref value);
                  ReportPropertyChanging("Password");
                  _Password = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Password");
                  OnPasswordChanged();
              }
            }
        }
        private string _Password;
        partial void OnGetPassword(ref string value);
        partial void OnPasswordChanging(ref string value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// There are no comments for ExperiencePoints in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ExperiencePoints
        {
            get
            {
                global::System.Nullable<int> value = _ExperiencePoints;
                OnGetExperiencePoints(ref value);
                return value;
            }
            set
            {
                if (_ExperiencePoints != value)
                {
                  OnExperiencePointsChanging(ref value);
                  ReportPropertyChanging("ExperiencePoints");
                  _ExperiencePoints = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ExperiencePoints");
                  OnExperiencePointsChanged();
              }
            }
        }
        private global::System.Nullable<int> _ExperiencePoints;
        partial void OnGetExperiencePoints(ref global::System.Nullable<int> value);
        partial void OnExperiencePointsChanging(ref global::System.Nullable<int> value);
        partial void OnExperiencePointsChanged();
    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<short> Level
        {
            get
            {
                global::System.Nullable<short> value = _Level;
                OnGetLevel(ref value);
                return value;
            }
            set
            {
                if (_Level != value)
                {
                  OnLevelChanging(ref value);
                  ReportPropertyChanging("Level");
                  _Level = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Level");
                  OnLevelChanged();
              }
            }
        }
        private global::System.Nullable<short> _Level;
        partial void OnGetLevel(ref global::System.Nullable<short> value);
        partial void OnLevelChanging(ref global::System.Nullable<short> value);
        partial void OnLevelChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Documents in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DIplomasUser_ID", "Documents")]
        public EntityCollection<Document> Documents
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Document>("MtcModel.FK_DIplomasUser_ID", "Documents");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Document>("MtcModel.FK_DIplomasUser_ID", "Documents", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Tasks in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskUser_Id", "Tasks")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Task>("MtcModel.FK_TaskUser_Id", "Tasks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Task>("MtcModel.FK_TaskUser_Id", "Tasks", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for Documents_MentorId in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentMentor_ID", "Documents_MentorId")]
        public EntityCollection<Document> Documents_MentorId
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Document>("MtcModel.FK_DocumentMentor_ID", "Documents_MentorId");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Document>("MtcModel.FK_DocumentMentor_ID", "Documents_MentorId", value);
                }
            }
        }

        #endregion
    }

}

namespace MtcModel
{

    #region TaskState

    /// <summary>
    /// There are no comments for MtcModel.TaskState in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="TaskState")]
    [DataContract]
    public enum TaskState : int
    {
    
        /// <summary>
        /// There are no comments for TaskState.Waiting in the schema.
        /// </summary>
        [EnumMember]
        Waiting = 1,    
        /// <summary>
        /// There are no comments for TaskState.InProgress in the schema.
        /// </summary>
        [EnumMember]
        InProgress = 2,    
        /// <summary>
        /// There are no comments for TaskState.Finished in the schema.
        /// </summary>
        [EnumMember]
        Finished = 3,    
        /// <summary>
        /// There are no comments for TaskState.Late in the schema.
        /// </summary>
        [EnumMember]
        Late = 4
    }
    #endregion

    #region TaskType

    /// <summary>
    /// There are no comments for MtcModel.TaskType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="TaskType")]
    [DataContract]
    public enum TaskType : int
    {
    
        /// <summary>
        /// There are no comments for TaskType.Task in the schema.
        /// </summary>
        [EnumMember]
        Task = 1,    
        /// <summary>
        /// There are no comments for TaskType.Bug in the schema.
        /// </summary>
        [EnumMember]
        Bug = 2,    
        /// <summary>
        /// There are no comments for TaskType.Improvement in the schema.
        /// </summary>
        [EnumMember]
        Improvement = 3
    }
    #endregion

    #region StructureElementType

    /// <summary>
    /// There are no comments for MtcModel.StructureElementType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="StructureElementType")]
    [DataContract]
    public enum StructureElementType : int
    {
    
        /// <summary>
        /// There are no comments for StructureElementType.MainTopic in the schema.
        /// </summary>
        [EnumMember]
        MainTopic = 1,    
        /// <summary>
        /// There are no comments for StructureElementType.SubTopic in the schema.
        /// </summary>
        [EnumMember]
        SubTopic = 2
    }
    #endregion

}
