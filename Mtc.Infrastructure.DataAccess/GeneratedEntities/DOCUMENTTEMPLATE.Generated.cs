//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 5/11/2016 11:55:44 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace MtcModel
{

    /// <summary>
    /// There are no comments for MtcModel.DOCUMENTTEMPLATE in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="DOCUMENTTEMPLATE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DOCUMENTTEMPLATE : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DOCUMENTTEMPLATE object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        public static DOCUMENTTEMPLATE CreateDOCUMENTTEMPLATE(int id)
        {
            DOCUMENTTEMPLATE dOCUMENTTEMPLATE = new DOCUMENTTEMPLATE();
            dOCUMENTTEMPLATE.Id = id;
            return dOCUMENTTEMPLATE;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for IsActive in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<sbyte> IsActive
        {
            get
            {
                global::System.Nullable<sbyte> value = _IsActive;
                OnGetIsActive(ref value);
                return value;
            }
            set
            {
                if (_IsActive != value)
                {
                  OnIsActiveChanging(ref value);
                  ReportPropertyChanging("IsActive");
                  _IsActive = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsActive");
                  OnIsActiveChanged();
              }
            }
        }
        private global::System.Nullable<sbyte> _IsActive;
        partial void OnGetIsActive(ref global::System.Nullable<sbyte> value);
        partial void OnIsActiveChanging(ref global::System.Nullable<sbyte> value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentDocumentTemplate_ID", "DOCUMENTs")]
        public EntityCollection<DOCUMENT> DOCUMENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTUREELEMENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "DOCUMENTTEMPLATE_STRUCTUREELEMENT", "STRUCTUREELEMENTs")]
        public EntityCollection<STRUCTUREELEMENT> STRUCTUREELEMENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<STRUCTUREELEMENT>("MtcModel.DOCUMENTTEMPLATE_STRUCTUREELEMENT", "STRUCTUREELEMENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<STRUCTUREELEMENT>("MtcModel.DOCUMENTTEMPLATE_STRUCTUREELEMENT", "STRUCTUREELEMENTs", value);
                }
            }
        }

        #endregion
    }

}
