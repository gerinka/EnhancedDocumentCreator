//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 5/1/2016 11:43:09 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace MtcContextModel
{

    /// <summary>
    /// There are no comments for MTCModel.TASK in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityType(NamespaceName="MTCModel", Name="TASK")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class TASK : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TASK object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="state">Initial value of State.</param>
        /// <param name="deadline">Initial value of Deadline.</param>
        /// <param name="documentId">Initial value of DocumentId.</param>
        /// <param name="taskType">Initial value of TaskType.</param>
        /// <param name="isLocked">Initial value of IsLocked.</param>
        public static TASK CreateTASK(int id, string title, int state, global::System.DateTime deadline, int documentId, int taskType, sbyte isLocked)
        {
            TASK tASK = new TASK();
            tASK.Id = id;
            tASK.Title = title;
            tASK.State = state;
            tASK.Deadline = deadline;
            tASK.DocumentId = documentId;
            tASK.TaskType = taskType;
            tASK.IsLocked = isLocked;
            return tASK;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarProperty(IsNullable=false)]
        [DataMember()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for AssignTo in the schema.
        /// </summary>
        [EdmScalarProperty()]
        [DataMember()]
        public global::System.Nullable<int> AssignTo
        {
            get
            {
                global::System.Nullable<int> value = _AssignTo;
                OnGetAssignTo(ref value);
                return value;
            }
            set
            {
                if (_AssignTo != value)
                {
                  OnAssignToChanging(ref value);
                  ReportPropertyChanging("AssignTo");
                  _AssignTo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("AssignTo");
                  OnAssignToChanged();
              }
            }
        }
        private global::System.Nullable<int> _AssignTo;
        partial void OnGetAssignTo(ref global::System.Nullable<int> value);
        partial void OnAssignToChanging(ref global::System.Nullable<int> value);
        partial void OnAssignToChanged();
    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [EdmScalarProperty(IsNullable=false)]
        [DataMember()]
        public int State
        {
            get
            {
                int value = _State;
                OnGetState(ref value);
                return value;
            }
            set
            {
                if (_State != value)
                {
                  OnStateChanging(ref value);
                  ReportPropertyChanging("State");
                  _State = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("State");
                  OnStateChanged();
              }
            }
        }
        private int _State;
        partial void OnGetState(ref int value);
        partial void OnStateChanging(ref int value);
        partial void OnStateChanged();
    
        /// <summary>
        /// There are no comments for Deadline in the schema.
        /// </summary>
        [EdmScalarProperty(IsNullable=false)]
        [DataMember()]
        public global::System.DateTime Deadline
        {
            get
            {
                global::System.DateTime value = _Deadline;
                OnGetDeadline(ref value);
                return value;
            }
            set
            {
                if (_Deadline != value)
                {
                  OnDeadlineChanging(ref value);
                  ReportPropertyChanging("Deadline");
                  _Deadline = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Deadline");
                  OnDeadlineChanged();
              }
            }
        }
        private global::System.DateTime _Deadline;
        partial void OnGetDeadline(ref global::System.DateTime value);
        partial void OnDeadlineChanging(ref global::System.DateTime value);
        partial void OnDeadlineChanged();
    
        /// <summary>
        /// There are no comments for DocumentId in the schema.
        /// </summary>
        [EdmScalarProperty(IsNullable=false)]
        [DataMember()]
        public int DocumentId
        {
            get
            {
                int value = _DocumentId;
                OnGetDocumentId(ref value);
                return value;
            }
            set
            {
                if (_DocumentId != value)
                {
                  OnDocumentIdChanging(ref value);
                  ReportPropertyChanging("DocumentId");
                  _DocumentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentId");
                  OnDocumentIdChanged();
              }
            }
        }
        private int _DocumentId;
        partial void OnGetDocumentId(ref int value);
        partial void OnDocumentIdChanging(ref int value);
        partial void OnDocumentIdChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarProperty()]
        [DataMember()]
        public global::System.Nullable<int> Order
        {
            get
            {
                global::System.Nullable<int> value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private global::System.Nullable<int> _Order;
        partial void OnGetOrder(ref global::System.Nullable<int> value);
        partial void OnOrderChanging(ref global::System.Nullable<int> value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// There are no comments for TaskType in the schema.
        /// </summary>
        [EdmScalarProperty(IsNullable=false)]
        [DataMember()]
        public int TaskType
        {
            get
            {
                int value = _TaskType;
                OnGetTaskType(ref value);
                return value;
            }
            set
            {
                if (_TaskType != value)
                {
                  OnTaskTypeChanging(ref value);
                  ReportPropertyChanging("TaskType");
                  _TaskType = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TaskType");
                  OnTaskTypeChanged();
              }
            }
        }
        private int _TaskType;
        partial void OnGetTaskType(ref int value);
        partial void OnTaskTypeChanging(ref int value);
        partial void OnTaskTypeChanged();
    
        /// <summary>
        /// There are no comments for IsLocked in the schema.
        /// </summary>
        [EdmScalarProperty(IsNullable=false)]
        [DataMember()]
        public sbyte IsLocked
        {
            get
            {
                sbyte value = _IsLocked;
                OnGetIsLocked(ref value);
                return value;
            }
            set
            {
                if (_IsLocked != value)
                {
                  OnIsLockedChanging(ref value);
                  ReportPropertyChanging("IsLocked");
                  _IsLocked = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsLocked");
                  OnIsLockedChanged();
              }
            }
        }
        private sbyte _IsLocked;
        partial void OnGetIsLocked(ref sbyte value);
        partial void OnIsLockedChanging(ref sbyte value);
        partial void OnIsLockedChanged();
    
        /// <summary>
        /// There are no comments for StrucktureContentId in the schema.
        /// </summary>
        [EdmScalarProperty()]
        [DataMember()]
        public global::System.Nullable<int> StrucktureContentId
        {
            get
            {
                global::System.Nullable<int> value = _StrucktureContentId;
                OnGetStrucktureContentId(ref value);
                return value;
            }
            set
            {
                if (_StrucktureContentId != value)
                {
                  OnStrucktureContentIdChanging(ref value);
                  ReportPropertyChanging("StrucktureContentId");
                  _StrucktureContentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StrucktureContentId");
                  OnStrucktureContentIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _StrucktureContentId;
        partial void OnGetStrucktureContentId(ref global::System.Nullable<int> value);
        partial void OnStrucktureContentIdChanging(ref global::System.Nullable<int> value);
        partial void OnStrucktureContentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for STRUCTURECONTENT in the schema.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MTCModel", "FK_TaskStructureContent_Id", "STRUCTURECONTENT")]
        public STRUCTURECONTENT STRUCTURECONTENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MTCModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MTCModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTURECONTENT in the schema.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<STRUCTURECONTENT> STRUCTURECONTENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MTCModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<STRUCTURECONTENT>("MTCModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MTCModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MTCModel", "FK_TaskDocument_Id", "DOCUMENT")]
        public DOCUMENT DOCUMENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MTCModel.FK_TaskDocument_Id", "DOCUMENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MTCModel.FK_TaskDocument_Id", "DOCUMENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<DOCUMENT> DOCUMENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MTCModel.FK_TaskDocument_Id", "DOCUMENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DOCUMENT>("MTCModel.FK_TaskDocument_Id", "DOCUMENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MTCModel.FK_TaskDocument_Id", "DOCUMENT").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for USER in the schema.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MTCModel", "FK_TaskUser_Id", "USER")]
        public USER USER
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MTCModel.FK_TaskUser_Id", "USER").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MTCModel.FK_TaskUser_Id", "USER").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for USER in the schema.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<USER> USERReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MTCModel.FK_TaskUser_Id", "USER");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<USER>("MTCModel.FK_TaskUser_Id", "USER", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MTCModel.FK_TaskUser_Id", "USER").Value = null;
                }
            }
        }

        #endregion
    }

}
