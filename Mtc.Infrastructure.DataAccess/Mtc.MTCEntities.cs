//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 5/1/2016 11:43:09 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using MtcContextModel;

[assembly: EdmSchema()]
#region EDM Relationship Metadata

[assembly: EdmRelationship("MTCModel", "FK_DocumentUser_ID", "USER_UserId", RelationshipMultiplicity.One, typeof(MtcContextModel.USER), "DOCUMENTs_UserId", RelationshipMultiplicity.Many, typeof(MtcContextModel.DOCUMENT), true)]
[assembly: EdmRelationship("MTCModel", "FK_DocumentMentor_ID", "USER_MentorId", RelationshipMultiplicity.ZeroOrOne, typeof(MtcContextModel.USER), "DOCUMENTs_MentorId", RelationshipMultiplicity.Many, typeof(MtcContextModel.DOCUMENT), true)]
[assembly: EdmRelationship("MTCModel", "FK_StructureContentDocument_Id", "DOCUMENT", RelationshipMultiplicity.One, typeof(MtcContextModel.DOCUMENT), "STRUCTURECONTENTs", RelationshipMultiplicity.Many, typeof(MtcContextModel.STRUCTURECONTENT), true)]
[assembly: EdmRelationship("MTCModel", "FK_StructureElementDocument_Id", "STRUCTUREELEMENT", RelationshipMultiplicity.One, typeof(MtcContextModel.STRUCTUREELEMENT), "STRUCTURECONTENTs", RelationshipMultiplicity.Many, typeof(MtcContextModel.STRUCTURECONTENT), true)]
[assembly: EdmRelationship("MTCModel", "FK_TaskStructureContent_Id", "STRUCTURECONTENT", RelationshipMultiplicity.ZeroOrOne, typeof(MtcContextModel.STRUCTURECONTENT), "TASKs", RelationshipMultiplicity.Many, typeof(MtcContextModel.TASK), true)]
[assembly: EdmRelationship("MTCModel", "FK_TaskDocument_Id", "DOCUMENT", RelationshipMultiplicity.One, typeof(MtcContextModel.DOCUMENT), "TASKs", RelationshipMultiplicity.Many, typeof(MtcContextModel.TASK), true)]
[assembly: EdmRelationship("MTCModel", "FK_TaskUser_Id", "USER", RelationshipMultiplicity.ZeroOrOne, typeof(MtcContextModel.USER), "TASKs", RelationshipMultiplicity.Many, typeof(MtcContextModel.TASK), true)]
[assembly: EdmRelationship("MTCModel", "STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs1", RelationshipMultiplicity.Many, typeof(MtcContextModel.STRUCTUREELEMENT), "STRUCTUREELEMENTs", RelationshipMultiplicity.Many, typeof(MtcContextModel.STRUCTUREELEMENT))]

#endregion

namespace Mtc.Infrastructure.DataAccess
{

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MtcEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new MtcEntities object.
        /// </summary>
        public MtcEntities() : 
                base(@"name=MTCEntitiesConnectionString", "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new MtcEntities object using the connection string found in the 'MtcEntities' section of the application configuration file.
        /// </summary>
        public MtcEntities(string connectionString) : 
                base(connectionString, "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new MtcEntities object.
        /// </summary>
        public MtcEntities(EntityConnection connection) : base(connection, "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DOCUMENT> DOCUMENTs
        {
            get
            {
                if ((_DOCUMENTs == null))
                {
                    _DOCUMENTs = base.CreateObjectSet<DOCUMENT>("DOCUMENTs");
                }
                return _DOCUMENTs;
            }
        }
        private ObjectSet<DOCUMENT> _DOCUMENTs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<STRUCTURECONTENT> STRUCTURECONTENTs
        {
            get
            {
                if ((_STRUCTURECONTENTs == null))
                {
                    _STRUCTURECONTENTs = base.CreateObjectSet<STRUCTURECONTENT>("STRUCTURECONTENTs");
                }
                return _STRUCTURECONTENTs;
            }
        }
        private ObjectSet<STRUCTURECONTENT> _STRUCTURECONTENTs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<STRUCTUREELEMENT> STRUCTUREELEMENTs
        {
            get
            {
                if ((_STRUCTUREELEMENTs == null))
                {
                    _STRUCTUREELEMENTs = base.CreateObjectSet<STRUCTUREELEMENT>("STRUCTUREELEMENTs");
                }
                return _STRUCTUREELEMENTs;
            }
        }
        private ObjectSet<STRUCTUREELEMENT> _STRUCTUREELEMENTs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TASK> TASKs
        {
            get
            {
                if ((_TASKs == null))
                {
                    _TASKs = base.CreateObjectSet<TASK>("TASKs");
                }
                return _TASKs;
            }
        }
        private ObjectSet<TASK> _TASKs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<USER> USERs
        {
            get
            {
                if ((_USERs == null))
                {
                    _USERs = base.CreateObjectSet<USER>("USERs");
                }
                return _USERs;
            }
        }
        private ObjectSet<USER> _USERs;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the DOCUMENTs EntitySet.
        /// </summary>
        public void AddToDOCUMENTs(DOCUMENT dOCUMENT)
        {
            base.AddObject("DOCUMENTs", dOCUMENT);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the STRUCTURECONTENTs EntitySet.
        /// </summary>
        public void AddToSTRUCTURECONTENTs(STRUCTURECONTENT sTRUCTURECONTENT)
        {
            base.AddObject("STRUCTURECONTENTs", sTRUCTURECONTENT);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the STRUCTUREELEMENTs EntitySet.
        /// </summary>
        public void AddToSTRUCTUREELEMENTs(STRUCTUREELEMENT sTRUCTUREELEMENT)
        {
            base.AddObject("STRUCTUREELEMENTs", sTRUCTUREELEMENT);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TASKs EntitySet.
        /// </summary>
        public void AddToTASKs(TASK tASK)
        {
            base.AddObject("TASKs", tASK);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the USERs EntitySet.
        /// </summary>
        public void AddToUSERs(USER uSER)
        {
            base.AddObject("USERs", uSER);
        }

        #endregion
    }
}
