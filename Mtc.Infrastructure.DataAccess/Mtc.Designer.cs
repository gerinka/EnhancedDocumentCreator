//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 5/16/2016 6:15:04 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MtcModel", "FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE", RelationshipMultiplicity.One, typeof(MtcModel.DOCUMENTTEMPLATE), "DOCUMENTs", RelationshipMultiplicity.Many, typeof(MtcModel.DOCUMENT), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_DocumentMentor_ID", "USER_MentorId", RelationshipMultiplicity.ZeroOrOne, typeof(MtcModel.USER), "DOCUMENTs_MentorId", RelationshipMultiplicity.Many, typeof(MtcModel.DOCUMENT), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_DocumentUser_ID", "USER_UserId", RelationshipMultiplicity.One, typeof(MtcModel.USER), "DOCUMENTs_UserId", RelationshipMultiplicity.Many, typeof(MtcModel.DOCUMENT), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_ReferenceDocument_Id", "DOCUMENT", RelationshipMultiplicity.One, typeof(MtcModel.DOCUMENT), "REFERENCEs", RelationshipMultiplicity.Many, typeof(MtcModel.REFERENCE), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_StructureContentDocument_Id", "DOCUMENT", RelationshipMultiplicity.One, typeof(MtcModel.DOCUMENT), "STRUCTURECONTENTs", RelationshipMultiplicity.Many, typeof(MtcModel.STRUCTURECONTENT), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_StructureElementDocument_Id", "STRUCTUREELEMENT", RelationshipMultiplicity.One, typeof(MtcModel.STRUCTUREELEMENT), "STRUCTURECONTENTs", RelationshipMultiplicity.Many, typeof(MtcModel.STRUCTURECONTENT), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_TaskDocument_Id", "DOCUMENT", RelationshipMultiplicity.One, typeof(MtcModel.DOCUMENT), "TASKs", RelationshipMultiplicity.Many, typeof(MtcModel.TASK), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_TaskStructureContent_Id", "STRUCTURECONTENT", RelationshipMultiplicity.ZeroOrOne, typeof(MtcModel.STRUCTURECONTENT), "TASKs", RelationshipMultiplicity.Many, typeof(MtcModel.TASK), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "FK_TaskUser_Id", "USER", RelationshipMultiplicity.ZeroOrOne, typeof(MtcModel.USER), "TASKs", RelationshipMultiplicity.Many, typeof(MtcModel.TASK), true)]
[assembly: EdmRelationshipAttribute("MtcModel", "DOCUMENTTEMPLATE_STRUCTUREELEMENT", "DOCUMENTTEMPLATEs", RelationshipMultiplicity.Many, typeof(MtcModel.DOCUMENTTEMPLATE), "STRUCTUREELEMENTs", RelationshipMultiplicity.Many, typeof(MtcModel.STRUCTUREELEMENT))]
[assembly: EdmRelationshipAttribute("MtcModel", "STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs1", RelationshipMultiplicity.Many, typeof(MtcModel.STRUCTUREELEMENT), "STRUCTUREELEMENTs", RelationshipMultiplicity.Many, typeof(MtcModel.STRUCTUREELEMENT))]

#endregion

namespace MtcModel
{

    #region MtcEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MtcEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new MtcEntities object.
        /// </summary>
        public MtcEntities() : 
                base(@"name=MTCEntitiesConnectionString", "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new MtcEntities object using the connection string found in the 'MtcEntities' section of the application configuration file.
        /// </summary>
        public MtcEntities(string connectionString) : 
                base(connectionString, "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new MtcEntities object.
        /// </summary>
        public MtcEntities(EntityConnection connection) : base(connection, "MtcEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DOCUMENT> DOCUMENTs
        {
            get
            {
                if ((_DOCUMENTs == null))
                {
                    _DOCUMENTs = base.CreateObjectSet<DOCUMENT>("DOCUMENTs");
                }
                return _DOCUMENTs;
            }
        }
        private ObjectSet<DOCUMENT> _DOCUMENTs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DOCUMENTTEMPLATE> DOCUMENTTEMPLATEs
        {
            get
            {
                if ((_DOCUMENTTEMPLATEs == null))
                {
                    _DOCUMENTTEMPLATEs = base.CreateObjectSet<DOCUMENTTEMPLATE>("DOCUMENTTEMPLATEs");
                }
                return _DOCUMENTTEMPLATEs;
            }
        }
        private ObjectSet<DOCUMENTTEMPLATE> _DOCUMENTTEMPLATEs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<REFERENCE> REFERENCEs
        {
            get
            {
                if ((_REFERENCEs == null))
                {
                    _REFERENCEs = base.CreateObjectSet<REFERENCE>("REFERENCEs");
                }
                return _REFERENCEs;
            }
        }
        private ObjectSet<REFERENCE> _REFERENCEs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<STRUCTURECONTENT> STRUCTURECONTENTs
        {
            get
            {
                if ((_STRUCTURECONTENTs == null))
                {
                    _STRUCTURECONTENTs = base.CreateObjectSet<STRUCTURECONTENT>("STRUCTURECONTENTs");
                }
                return _STRUCTURECONTENTs;
            }
        }
        private ObjectSet<STRUCTURECONTENT> _STRUCTURECONTENTs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<STRUCTUREELEMENT> STRUCTUREELEMENTs
        {
            get
            {
                if ((_STRUCTUREELEMENTs == null))
                {
                    _STRUCTUREELEMENTs = base.CreateObjectSet<STRUCTUREELEMENT>("STRUCTUREELEMENTs");
                }
                return _STRUCTUREELEMENTs;
            }
        }
        private ObjectSet<STRUCTUREELEMENT> _STRUCTUREELEMENTs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TASK> TASKs
        {
            get
            {
                if ((_TASKs == null))
                {
                    _TASKs = base.CreateObjectSet<TASK>("TASKs");
                }
                return _TASKs;
            }
        }
        private ObjectSet<TASK> _TASKs;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<USER> USERs
        {
            get
            {
                if ((_USERs == null))
                {
                    _USERs = base.CreateObjectSet<USER>("USERs");
                }
                return _USERs;
            }
        }
        private ObjectSet<USER> _USERs;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the DOCUMENTs EntitySet.
        /// </summary>
        public void AddToDOCUMENTs(DOCUMENT dOCUMENT)
        {
            base.AddObject("DOCUMENTs", dOCUMENT);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the DOCUMENTTEMPLATEs EntitySet.
        /// </summary>
        public void AddToDOCUMENTTEMPLATEs(DOCUMENTTEMPLATE dOCUMENTTEMPLATE)
        {
            base.AddObject("DOCUMENTTEMPLATEs", dOCUMENTTEMPLATE);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the REFERENCEs EntitySet.
        /// </summary>
        public void AddToREFERENCEs(REFERENCE rEFERENCE)
        {
            base.AddObject("REFERENCEs", rEFERENCE);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the STRUCTURECONTENTs EntitySet.
        /// </summary>
        public void AddToSTRUCTURECONTENTs(STRUCTURECONTENT sTRUCTURECONTENT)
        {
            base.AddObject("STRUCTURECONTENTs", sTRUCTURECONTENT);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the STRUCTUREELEMENTs EntitySet.
        /// </summary>
        public void AddToSTRUCTUREELEMENTs(STRUCTUREELEMENT sTRUCTUREELEMENT)
        {
            base.AddObject("STRUCTUREELEMENTs", sTRUCTUREELEMENT);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the TASKs EntitySet.
        /// </summary>
        public void AddToTASKs(TASK tASK)
        {
            base.AddObject("TASKs", tASK);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the USERs EntitySet.
        /// </summary>
        public void AddToUSERs(USER uSER)
        {
            base.AddObject("USERs", uSER);
        }

        #endregion
    }

    #endregion
}

namespace MtcModel
{

    /// <summary>
    /// There are no comments for MtcModel.DOCUMENT in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="DOCUMENT")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DOCUMENT : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DOCUMENT object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="userId">Initial value of UserId.</param>
        /// <param name="deadline">Initial value of Deadline.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="documentTemplateId">Initial value of DocumentTemplateId.</param>
        public static DOCUMENT CreateDOCUMENT(int iD, int userId, global::System.DateTime deadline, string title, int documentTemplateId)
        {
            DOCUMENT dOCUMENT = new DOCUMENT();
            dOCUMENT.ID = iD;
            dOCUMENT.UserId = userId;
            dOCUMENT.Deadline = deadline;
            dOCUMENT.Title = title;
            dOCUMENT.DocumentTemplateId = documentTemplateId;
            return dOCUMENT;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int ID
        {
            get
            {
                int value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private int _ID;
        partial void OnGetID(ref int value);
        partial void OnIDChanging(ref int value);
        partial void OnIDChanged();
    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int UserId
        {
            get
            {
                int value = _UserId;
                OnGetUserId(ref value);
                return value;
            }
            set
            {
                if (_UserId != value)
                {
                  OnUserIdChanging(ref value);
                  ReportPropertyChanging("UserId");
                  _UserId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UserId");
                  OnUserIdChanged();
              }
            }
        }
        private int _UserId;
        partial void OnGetUserId(ref int value);
        partial void OnUserIdChanging(ref int value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// There are no comments for Deadline in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Deadline
        {
            get
            {
                global::System.DateTime value = _Deadline;
                OnGetDeadline(ref value);
                return value;
            }
            set
            {
                if (_Deadline != value)
                {
                  OnDeadlineChanging(ref value);
                  ReportPropertyChanging("Deadline");
                  _Deadline = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Deadline");
                  OnDeadlineChanged();
              }
            }
        }
        private global::System.DateTime _Deadline;
        partial void OnGetDeadline(ref global::System.DateTime value);
        partial void OnDeadlineChanging(ref global::System.DateTime value);
        partial void OnDeadlineChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for CurrentProgress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> CurrentProgress
        {
            get
            {
                global::System.Nullable<int> value = _CurrentProgress;
                OnGetCurrentProgress(ref value);
                return value;
            }
            set
            {
                if (_CurrentProgress != value)
                {
                  OnCurrentProgressChanging(ref value);
                  ReportPropertyChanging("CurrentProgress");
                  _CurrentProgress = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CurrentProgress");
                  OnCurrentProgressChanged();
              }
            }
        }
        private global::System.Nullable<int> _CurrentProgress;
        partial void OnGetCurrentProgress(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanging(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanged();
    
        /// <summary>
        /// There are no comments for MentorId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> MentorId
        {
            get
            {
                global::System.Nullable<int> value = _MentorId;
                OnGetMentorId(ref value);
                return value;
            }
            set
            {
                if (_MentorId != value)
                {
                  OnMentorIdChanging(ref value);
                  ReportPropertyChanging("MentorId");
                  _MentorId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("MentorId");
                  OnMentorIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _MentorId;
        partial void OnGetMentorId(ref global::System.Nullable<int> value);
        partial void OnMentorIdChanging(ref global::System.Nullable<int> value);
        partial void OnMentorIdChanged();
    
        /// <summary>
        /// There are no comments for DocumentTemplateId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int DocumentTemplateId
        {
            get
            {
                int value = _DocumentTemplateId;
                OnGetDocumentTemplateId(ref value);
                return value;
            }
            set
            {
                if (_DocumentTemplateId != value)
                {
                  OnDocumentTemplateIdChanging(ref value);
                  ReportPropertyChanging("DocumentTemplateId");
                  _DocumentTemplateId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentTemplateId");
                  OnDocumentTemplateIdChanged();
              }
            }
        }
        private int _DocumentTemplateId;
        partial void OnGetDocumentTemplateId(ref int value);
        partial void OnDocumentTemplateIdChanging(ref int value);
        partial void OnDocumentTemplateIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENTTEMPLATE in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE")]
        public DOCUMENTTEMPLATE DOCUMENTTEMPLATE
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENTTEMPLATE>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENTTEMPLATE>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENTTEMPLATE in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DOCUMENTTEMPLATE> DOCUMENTTEMPLATEReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENTTEMPLATE>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DOCUMENTTEMPLATE>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENTTEMPLATE>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTTEMPLATE").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for USER_MentorId in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentMentor_ID", "USER_MentorId")]
        public USER USER_MentorId
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentMentor_ID", "USER_MentorId").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentMentor_ID", "USER_MentorId").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for USER_MentorId in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<USER> USER_MentorIdReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentMentor_ID", "USER_MentorId");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<USER>("MtcModel.FK_DocumentMentor_ID", "USER_MentorId", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentMentor_ID", "USER_MentorId").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for USER_UserId in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentUser_ID", "USER_UserId")]
        public USER USER_UserId
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentUser_ID", "USER_UserId").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentUser_ID", "USER_UserId").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for USER_UserId in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<USER> USER_UserIdReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentUser_ID", "USER_UserId");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<USER>("MtcModel.FK_DocumentUser_ID", "USER_UserId", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_DocumentUser_ID", "USER_UserId").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for REFERENCEs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_ReferenceDocument_Id", "REFERENCEs")]
        public EntityCollection<REFERENCE> REFERENCEs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<REFERENCE>("MtcModel.FK_ReferenceDocument_Id", "REFERENCEs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<REFERENCE>("MtcModel.FK_ReferenceDocument_Id", "REFERENCEs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTURECONTENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureContentDocument_Id", "STRUCTURECONTENTs")]
        public EntityCollection<STRUCTURECONTENT> STRUCTURECONTENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<STRUCTURECONTENT>("MtcModel.FK_StructureContentDocument_Id", "STRUCTURECONTENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<STRUCTURECONTENT>("MtcModel.FK_StructureContentDocument_Id", "STRUCTURECONTENTs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TASKs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskDocument_Id", "TASKs")]
        public EntityCollection<TASK> TASKs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TASK>("MtcModel.FK_TaskDocument_Id", "TASKs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TASK>("MtcModel.FK_TaskDocument_Id", "TASKs", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.DOCUMENTTEMPLATE in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="DOCUMENTTEMPLATE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DOCUMENTTEMPLATE : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new DOCUMENTTEMPLATE object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="isActive">Initial value of IsActive.</param>
        public static DOCUMENTTEMPLATE CreateDOCUMENTTEMPLATE(int id, sbyte isActive)
        {
            DOCUMENTTEMPLATE dOCUMENTTEMPLATE = new DOCUMENTTEMPLATE();
            dOCUMENTTEMPLATE.Id = id;
            dOCUMENTTEMPLATE.IsActive = isActive;
            return dOCUMENTTEMPLATE;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for IsActive in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public sbyte IsActive
        {
            get
            {
                sbyte value = _IsActive;
                OnGetIsActive(ref value);
                return value;
            }
            set
            {
                if (_IsActive != value)
                {
                  OnIsActiveChanging(ref value);
                  ReportPropertyChanging("IsActive");
                  _IsActive = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsActive");
                  OnIsActiveChanged();
              }
            }
        }
        private sbyte _IsActive;
        partial void OnGetIsActive(ref sbyte value);
        partial void OnIsActiveChanging(ref sbyte value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentDocumentTemplate_ID", "DOCUMENTs")]
        public EntityCollection<DOCUMENT> DOCUMENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentDocumentTemplate_ID", "DOCUMENTs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTUREELEMENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "DOCUMENTTEMPLATE_STRUCTUREELEMENT", "STRUCTUREELEMENTs")]
        public EntityCollection<STRUCTUREELEMENT> STRUCTUREELEMENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<STRUCTUREELEMENT>("MtcModel.DOCUMENTTEMPLATE_STRUCTUREELEMENT", "STRUCTUREELEMENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<STRUCTUREELEMENT>("MtcModel.DOCUMENTTEMPLATE_STRUCTUREELEMENT", "STRUCTUREELEMENTs", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.REFERENCE in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="REFERENCE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class REFERENCE : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new REFERENCE object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="documentId">Initial value of DocumentId.</param>
        public static REFERENCE CreateREFERENCE(int id, int documentId)
        {
            REFERENCE rEFERENCE = new REFERENCE();
            rEFERENCE.Id = id;
            rEFERENCE.DocumentId = documentId;
            return rEFERENCE;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for ReferenceTypeId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public System.Nullable<ReferenceType> ReferenceTypeId
        {
            get
            {
                System.Nullable<ReferenceType> value = _ReferenceTypeId;
                OnGetReferenceTypeId(ref value);
                return value;
            }
            set
            {
                if (_ReferenceTypeId != value)
                {
                  OnReferenceTypeIdChanging(ref value);
                  ReportPropertyChanging("ReferenceTypeId");
                  _ReferenceTypeId = (System.Nullable<ReferenceType>)StructuralObject.SetValidValue((global::System.Nullable<int>)value);
                  ReportPropertyChanged("ReferenceTypeId");
                  OnReferenceTypeIdChanged();
              }
            }
        }
        private System.Nullable<ReferenceType> _ReferenceTypeId;
        partial void OnGetReferenceTypeId(ref System.Nullable<ReferenceType> value);
        partial void OnReferenceTypeIdChanging(ref System.Nullable<ReferenceType> value);
        partial void OnReferenceTypeIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Order
        {
            get
            {
                global::System.Nullable<int> value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private global::System.Nullable<int> _Order;
        partial void OnGetOrder(ref global::System.Nullable<int> value);
        partial void OnOrderChanging(ref global::System.Nullable<int> value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// There are no comments for DocumentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int DocumentId
        {
            get
            {
                int value = _DocumentId;
                OnGetDocumentId(ref value);
                return value;
            }
            set
            {
                if (_DocumentId != value)
                {
                  OnDocumentIdChanging(ref value);
                  ReportPropertyChanging("DocumentId");
                  _DocumentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentId");
                  OnDocumentIdChanged();
              }
            }
        }
        private int _DocumentId;
        partial void OnGetDocumentId(ref int value);
        partial void OnDocumentIdChanging(ref int value);
        partial void OnDocumentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_ReferenceDocument_Id", "DOCUMENT")]
        public DOCUMENT DOCUMENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_ReferenceDocument_Id", "DOCUMENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_ReferenceDocument_Id", "DOCUMENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DOCUMENT> DOCUMENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_ReferenceDocument_Id", "DOCUMENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DOCUMENT>("MtcModel.FK_ReferenceDocument_Id", "DOCUMENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_ReferenceDocument_Id", "DOCUMENT").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.STRUCTURECONTENT in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="STRUCTURECONTENT")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class STRUCTURECONTENT : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new STRUCTURECONTENT object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="structureElementId">Initial value of StructureElementId.</param>
        /// <param name="documentId">Initial value of DocumentId.</param>
        /// <param name="order">Initial value of Order.</param>
        public static STRUCTURECONTENT CreateSTRUCTURECONTENT(int id, int structureElementId, int documentId, int order)
        {
            STRUCTURECONTENT sTRUCTURECONTENT = new STRUCTURECONTENT();
            sTRUCTURECONTENT.Id = id;
            sTRUCTURECONTENT.StructureElementId = structureElementId;
            sTRUCTURECONTENT.DocumentId = documentId;
            sTRUCTURECONTENT.Order = order;
            return sTRUCTURECONTENT;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for StructureElementId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int StructureElementId
        {
            get
            {
                int value = _StructureElementId;
                OnGetStructureElementId(ref value);
                return value;
            }
            set
            {
                if (_StructureElementId != value)
                {
                  OnStructureElementIdChanging(ref value);
                  ReportPropertyChanging("StructureElementId");
                  _StructureElementId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StructureElementId");
                  OnStructureElementIdChanged();
              }
            }
        }
        private int _StructureElementId;
        partial void OnGetStructureElementId(ref int value);
        partial void OnStructureElementIdChanging(ref int value);
        partial void OnStructureElementIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for Content in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public byte[] Content
        {
            get
            {
                byte[] value = _Content;
                OnGetContent(ref value);
                return value;
            }
            set
            {
                if (_Content != value)
                {
                  OnContentChanging(ref value);
                  ReportPropertyChanging("Content");
                  _Content = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Content");
                  OnContentChanged();
              }
            }
        }
        private byte[] _Content;
        partial void OnGetContent(ref byte[] value);
        partial void OnContentChanging(ref byte[] value);
        partial void OnContentChanged();
    
        /// <summary>
        /// There are no comments for DocumentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int DocumentId
        {
            get
            {
                int value = _DocumentId;
                OnGetDocumentId(ref value);
                return value;
            }
            set
            {
                if (_DocumentId != value)
                {
                  OnDocumentIdChanging(ref value);
                  ReportPropertyChanging("DocumentId");
                  _DocumentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentId");
                  OnDocumentIdChanged();
              }
            }
        }
        private int _DocumentId;
        partial void OnGetDocumentId(ref int value);
        partial void OnDocumentIdChanging(ref int value);
        partial void OnDocumentIdChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int Order
        {
            get
            {
                int value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private int _Order;
        partial void OnGetOrder(ref int value);
        partial void OnOrderChanging(ref int value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// There are no comments for CurrentProgress in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> CurrentProgress
        {
            get
            {
                global::System.Nullable<int> value = _CurrentProgress;
                OnGetCurrentProgress(ref value);
                return value;
            }
            set
            {
                if (_CurrentProgress != value)
                {
                  OnCurrentProgressChanging(ref value);
                  ReportPropertyChanging("CurrentProgress");
                  _CurrentProgress = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CurrentProgress");
                  OnCurrentProgressChanged();
              }
            }
        }
        private global::System.Nullable<int> _CurrentProgress;
        partial void OnGetCurrentProgress(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanging(ref global::System.Nullable<int> value);
        partial void OnCurrentProgressChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureContentDocument_Id", "DOCUMENT")]
        public DOCUMENT DOCUMENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_StructureContentDocument_Id", "DOCUMENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_StructureContentDocument_Id", "DOCUMENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DOCUMENT> DOCUMENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_StructureContentDocument_Id", "DOCUMENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DOCUMENT>("MtcModel.FK_StructureContentDocument_Id", "DOCUMENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_StructureContentDocument_Id", "DOCUMENT").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTUREELEMENT in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureElementDocument_Id", "STRUCTUREELEMENT")]
        public STRUCTUREELEMENT STRUCTUREELEMENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTUREELEMENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTUREELEMENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTUREELEMENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTUREELEMENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTUREELEMENT in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<STRUCTUREELEMENT> STRUCTUREELEMENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTUREELEMENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTUREELEMENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<STRUCTUREELEMENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTUREELEMENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTUREELEMENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTUREELEMENT").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TASKs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskStructureContent_Id", "TASKs")]
        public EntityCollection<TASK> TASKs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TASK>("MtcModel.FK_TaskStructureContent_Id", "TASKs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TASK>("MtcModel.FK_TaskStructureContent_Id", "TASKs", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.STRUCTUREELEMENT in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="STRUCTUREELEMENT")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class STRUCTUREELEMENT : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new STRUCTUREELEMENT object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="structureTypeId">Initial value of StructureTypeId.</param>
        public static STRUCTUREELEMENT CreateSTRUCTUREELEMENT(int id, StructureType structureTypeId)
        {
            STRUCTUREELEMENT sTRUCTUREELEMENT = new STRUCTUREELEMENT();
            sTRUCTUREELEMENT.Id = id;
            sTRUCTUREELEMENT.StructureTypeId = structureTypeId;
            return sTRUCTUREELEMENT;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for StructureTypeId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public StructureType StructureTypeId
        {
            get
            {
                StructureType value = _StructureTypeId;
                OnGetStructureTypeId(ref value);
                return value;
            }
            set
            {
                if (_StructureTypeId != value)
                {
                  OnStructureTypeIdChanging(ref value);
                  ReportPropertyChanging("StructureTypeId");
                  _StructureTypeId = (StructureType)StructuralObject.SetValidValue((int)value);
                  ReportPropertyChanged("StructureTypeId");
                  OnStructureTypeIdChanged();
              }
            }
        }
        private StructureType _StructureTypeId;
        partial void OnGetStructureTypeId(ref StructureType value);
        partial void OnStructureTypeIdChanging(ref StructureType value);
        partial void OnStructureTypeIdChanged();
    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Order
        {
            get
            {
                global::System.Nullable<int> value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private global::System.Nullable<int> _Order;
        partial void OnGetOrder(ref global::System.Nullable<int> value);
        partial void OnOrderChanging(ref global::System.Nullable<int> value);
        partial void OnOrderChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for STRUCTURECONTENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_StructureElementDocument_Id", "STRUCTURECONTENTs")]
        public EntityCollection<STRUCTURECONTENT> STRUCTURECONTENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<STRUCTURECONTENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTURECONTENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<STRUCTURECONTENT>("MtcModel.FK_StructureElementDocument_Id", "STRUCTURECONTENTs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENTTEMPLATEs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "DOCUMENTTEMPLATE_STRUCTUREELEMENT", "DOCUMENTTEMPLATEs")]
        public EntityCollection<DOCUMENTTEMPLATE> DOCUMENTTEMPLATEs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DOCUMENTTEMPLATE>("MtcModel.DOCUMENTTEMPLATE_STRUCTUREELEMENT", "DOCUMENTTEMPLATEs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DOCUMENTTEMPLATE>("MtcModel.DOCUMENTTEMPLATE_STRUCTUREELEMENT", "DOCUMENTTEMPLATEs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTUREELEMENTs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs")]
        public EntityCollection<STRUCTUREELEMENT> STRUCTUREELEMENTs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<STRUCTUREELEMENT>("MtcModel.STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<STRUCTUREELEMENT>("MtcModel.STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTUREELEMENTs1 in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs1")]
        public EntityCollection<STRUCTUREELEMENT> STRUCTUREELEMENTs1
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<STRUCTUREELEMENT>("MtcModel.STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<STRUCTUREELEMENT>("MtcModel.STRUCTUREELEMENT_STRUCTUREELEMENT", "STRUCTUREELEMENTs1", value);
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.TASK in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="TASK")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TASK : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new TASK object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="title">Initial value of Title.</param>
        /// <param name="taskState">Initial value of TaskState.</param>
        /// <param name="deadline">Initial value of Deadline.</param>
        /// <param name="documentId">Initial value of DocumentId.</param>
        /// <param name="taskType">Initial value of TaskType.</param>
        /// <param name="isLocked">Initial value of IsLocked.</param>
        public static TASK CreateTASK(int id, string title, int taskState, global::System.DateTime deadline, int documentId, TaskType taskType, sbyte isLocked)
        {
            TASK tASK = new TASK();
            tASK.Id = id;
            tASK.Title = title;
            tASK.TaskState = taskState;
            tASK.Deadline = deadline;
            tASK.DocumentId = documentId;
            tASK.TaskType = taskType;
            tASK.IsLocked = isLocked;
            return tASK;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// There are no comments for AssignTo in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> AssignTo
        {
            get
            {
                global::System.Nullable<int> value = _AssignTo;
                OnGetAssignTo(ref value);
                return value;
            }
            set
            {
                if (_AssignTo != value)
                {
                  OnAssignToChanging(ref value);
                  ReportPropertyChanging("AssignTo");
                  _AssignTo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("AssignTo");
                  OnAssignToChanged();
              }
            }
        }
        private global::System.Nullable<int> _AssignTo;
        partial void OnGetAssignTo(ref global::System.Nullable<int> value);
        partial void OnAssignToChanging(ref global::System.Nullable<int> value);
        partial void OnAssignToChanged();
    
        /// <summary>
        /// There are no comments for TaskState in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int TaskState
        {
            get
            {
                int value = _TaskState;
                OnGetTaskState(ref value);
                return value;
            }
            set
            {
                if (_TaskState != value)
                {
                  OnTaskStateChanging(ref value);
                  ReportPropertyChanging("TaskState");
                  _TaskState = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("TaskState");
                  OnTaskStateChanged();
              }
            }
        }
        private int _TaskState;
        partial void OnGetTaskState(ref int value);
        partial void OnTaskStateChanging(ref int value);
        partial void OnTaskStateChanged();
    
        /// <summary>
        /// There are no comments for Deadline in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Deadline
        {
            get
            {
                global::System.DateTime value = _Deadline;
                OnGetDeadline(ref value);
                return value;
            }
            set
            {
                if (_Deadline != value)
                {
                  OnDeadlineChanging(ref value);
                  ReportPropertyChanging("Deadline");
                  _Deadline = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Deadline");
                  OnDeadlineChanged();
              }
            }
        }
        private global::System.DateTime _Deadline;
        partial void OnGetDeadline(ref global::System.DateTime value);
        partial void OnDeadlineChanging(ref global::System.DateTime value);
        partial void OnDeadlineChanged();
    
        /// <summary>
        /// There are no comments for DocumentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int DocumentId
        {
            get
            {
                int value = _DocumentId;
                OnGetDocumentId(ref value);
                return value;
            }
            set
            {
                if (_DocumentId != value)
                {
                  OnDocumentIdChanging(ref value);
                  ReportPropertyChanging("DocumentId");
                  _DocumentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DocumentId");
                  OnDocumentIdChanged();
              }
            }
        }
        private int _DocumentId;
        partial void OnGetDocumentId(ref int value);
        partial void OnDocumentIdChanging(ref int value);
        partial void OnDocumentIdChanged();
    
        /// <summary>
        /// There are no comments for Order in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> Order
        {
            get
            {
                global::System.Nullable<int> value = _Order;
                OnGetOrder(ref value);
                return value;
            }
            set
            {
                if (_Order != value)
                {
                  OnOrderChanging(ref value);
                  ReportPropertyChanging("Order");
                  _Order = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Order");
                  OnOrderChanged();
              }
            }
        }
        private global::System.Nullable<int> _Order;
        partial void OnGetOrder(ref global::System.Nullable<int> value);
        partial void OnOrderChanging(ref global::System.Nullable<int> value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// There are no comments for TaskType in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public TaskType TaskType
        {
            get
            {
                TaskType value = _TaskType;
                OnGetTaskType(ref value);
                return value;
            }
            set
            {
                if (_TaskType != value)
                {
                  OnTaskTypeChanging(ref value);
                  ReportPropertyChanging("TaskType");
                  _TaskType = (TaskType)StructuralObject.SetValidValue((int)value);
                  ReportPropertyChanged("TaskType");
                  OnTaskTypeChanged();
              }
            }
        }
        private TaskType _TaskType;
        partial void OnGetTaskType(ref TaskType value);
        partial void OnTaskTypeChanging(ref TaskType value);
        partial void OnTaskTypeChanged();
    
        /// <summary>
        /// There are no comments for IsLocked in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public sbyte IsLocked
        {
            get
            {
                sbyte value = _IsLocked;
                OnGetIsLocked(ref value);
                return value;
            }
            set
            {
                if (_IsLocked != value)
                {
                  OnIsLockedChanging(ref value);
                  ReportPropertyChanging("IsLocked");
                  _IsLocked = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsLocked");
                  OnIsLockedChanged();
              }
            }
        }
        private sbyte _IsLocked;
        partial void OnGetIsLocked(ref sbyte value);
        partial void OnIsLockedChanging(ref sbyte value);
        partial void OnIsLockedChanged();
    
        /// <summary>
        /// There are no comments for StrucktureContentId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> StrucktureContentId
        {
            get
            {
                global::System.Nullable<int> value = _StrucktureContentId;
                OnGetStrucktureContentId(ref value);
                return value;
            }
            set
            {
                if (_StrucktureContentId != value)
                {
                  OnStrucktureContentIdChanging(ref value);
                  ReportPropertyChanging("StrucktureContentId");
                  _StrucktureContentId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("StrucktureContentId");
                  OnStrucktureContentIdChanged();
              }
            }
        }
        private global::System.Nullable<int> _StrucktureContentId;
        partial void OnGetStrucktureContentId(ref global::System.Nullable<int> value);
        partial void OnStrucktureContentIdChanging(ref global::System.Nullable<int> value);
        partial void OnStrucktureContentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskDocument_Id", "DOCUMENT")]
        public DOCUMENT DOCUMENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_TaskDocument_Id", "DOCUMENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_TaskDocument_Id", "DOCUMENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENT in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DOCUMENT> DOCUMENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_TaskDocument_Id", "DOCUMENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DOCUMENT>("MtcModel.FK_TaskDocument_Id", "DOCUMENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DOCUMENT>("MtcModel.FK_TaskDocument_Id", "DOCUMENT").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTURECONTENT in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskStructureContent_Id", "STRUCTURECONTENT")]
        public STRUCTURECONTENT STRUCTURECONTENT
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MtcModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MtcModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for STRUCTURECONTENT in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<STRUCTURECONTENT> STRUCTURECONTENTReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MtcModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<STRUCTURECONTENT>("MtcModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<STRUCTURECONTENT>("MtcModel.FK_TaskStructureContent_Id", "STRUCTURECONTENT").Value = null;
                }
            }
        }
    
        /// <summary>
        /// There are no comments for USER in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskUser_Id", "USER")]
        public USER USER
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_TaskUser_Id", "USER").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_TaskUser_Id", "USER").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for USER in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<USER> USERReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_TaskUser_Id", "USER");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<USER>("MtcModel.FK_TaskUser_Id", "USER", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<USER>("MtcModel.FK_TaskUser_Id", "USER").Value = null;
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for MtcModel.USER in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="MtcModel", Name="USER")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class USER : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new USER object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="firstName">Initial value of FirstName.</param>
        /// <param name="familyName">Initial value of FamilyName.</param>
        /// <param name="userName">Initial value of UserName.</param>
        /// <param name="email">Initial value of Email.</param>
        /// <param name="password">Initial value of Password.</param>
        public static USER CreateUSER(int id, string firstName, string familyName, string userName, string email, string password)
        {
            USER uSER = new USER();
            uSER.Id = id;
            uSER.FirstName = firstName;
            uSER.FamilyName = familyName;
            uSER.UserName = userName;
            uSER.Email = email;
            uSER.Password = password;
            return uSER;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                string value = _FirstName;
                OnGetFirstName(ref value);
                return value;
            }
            set
            {
                if (_FirstName != value)
                {
                  OnFirstNameChanging(ref value);
                  ReportPropertyChanging("FirstName");
                  _FirstName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("FirstName");
                  OnFirstNameChanged();
              }
            }
        }
        private string _FirstName;
        partial void OnGetFirstName(ref string value);
        partial void OnFirstNameChanging(ref string value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// There are no comments for MiddleName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string MiddleName
        {
            get
            {
                string value = _MiddleName;
                OnGetMiddleName(ref value);
                return value;
            }
            set
            {
                if (_MiddleName != value)
                {
                  OnMiddleNameChanging(ref value);
                  ReportPropertyChanging("MiddleName");
                  _MiddleName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("MiddleName");
                  OnMiddleNameChanged();
              }
            }
        }
        private string _MiddleName;
        partial void OnGetMiddleName(ref string value);
        partial void OnMiddleNameChanging(ref string value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// There are no comments for FamilyName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string FamilyName
        {
            get
            {
                string value = _FamilyName;
                OnGetFamilyName(ref value);
                return value;
            }
            set
            {
                if (_FamilyName != value)
                {
                  OnFamilyNameChanging(ref value);
                  ReportPropertyChanging("FamilyName");
                  _FamilyName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("FamilyName");
                  OnFamilyNameChanged();
              }
            }
        }
        private string _FamilyName;
        partial void OnGetFamilyName(ref string value);
        partial void OnFamilyNameChanging(ref string value);
        partial void OnFamilyNameChanged();
    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string UserName
        {
            get
            {
                string value = _UserName;
                OnGetUserName(ref value);
                return value;
            }
            set
            {
                if (_UserName != value)
                {
                  OnUserNameChanging(ref value);
                  ReportPropertyChanging("UserName");
                  _UserName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("UserName");
                  OnUserNameChanged();
              }
            }
        }
        private string _UserName;
        partial void OnGetUserName(ref string value);
        partial void OnUserNameChanging(ref string value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Email
        {
            get
            {
                string value = _Email;
                OnGetEmail(ref value);
                return value;
            }
            set
            {
                if (_Email != value)
                {
                  OnEmailChanging(ref value);
                  ReportPropertyChanging("Email");
                  _Email = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Email");
                  OnEmailChanged();
              }
            }
        }
        private string _Email;
        partial void OnGetEmail(ref string value);
        partial void OnEmailChanging(ref string value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string Password
        {
            get
            {
                string value = _Password;
                OnGetPassword(ref value);
                return value;
            }
            set
            {
                if (_Password != value)
                {
                  OnPasswordChanging(ref value);
                  ReportPropertyChanging("Password");
                  _Password = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Password");
                  OnPasswordChanged();
              }
            }
        }
        private string _Password;
        partial void OnGetPassword(ref string value);
        partial void OnPasswordChanging(ref string value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// There are no comments for ExperiencePoints in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ExperiencePoints
        {
            get
            {
                global::System.Nullable<int> value = _ExperiencePoints;
                OnGetExperiencePoints(ref value);
                return value;
            }
            set
            {
                if (_ExperiencePoints != value)
                {
                  OnExperiencePointsChanging(ref value);
                  ReportPropertyChanging("ExperiencePoints");
                  _ExperiencePoints = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ExperiencePoints");
                  OnExperiencePointsChanged();
              }
            }
        }
        private global::System.Nullable<int> _ExperiencePoints;
        partial void OnGetExperiencePoints(ref global::System.Nullable<int> value);
        partial void OnExperiencePointsChanging(ref global::System.Nullable<int> value);
        partial void OnExperiencePointsChanged();
    
        /// <summary>
        /// There are no comments for Level in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<short> Level
        {
            get
            {
                global::System.Nullable<short> value = _Level;
                OnGetLevel(ref value);
                return value;
            }
            set
            {
                if (_Level != value)
                {
                  OnLevelChanging(ref value);
                  ReportPropertyChanging("Level");
                  _Level = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Level");
                  OnLevelChanged();
              }
            }
        }
        private global::System.Nullable<short> _Level;
        partial void OnGetLevel(ref global::System.Nullable<short> value);
        partial void OnLevelChanging(ref global::System.Nullable<short> value);
        partial void OnLevelChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for DOCUMENTs_MentorId in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentMentor_ID", "DOCUMENTs_MentorId")]
        public EntityCollection<DOCUMENT> DOCUMENTs_MentorId
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentMentor_ID", "DOCUMENTs_MentorId");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentMentor_ID", "DOCUMENTs_MentorId", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for DOCUMENTs_UserId in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_DocumentUser_ID", "DOCUMENTs_UserId")]
        public EntityCollection<DOCUMENT> DOCUMENTs_UserId
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentUser_ID", "DOCUMENTs_UserId");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<DOCUMENT>("MtcModel.FK_DocumentUser_ID", "DOCUMENTs_UserId", value);
                }
            }
        }
    
        /// <summary>
        /// There are no comments for TASKs in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MtcModel", "FK_TaskUser_Id", "TASKs")]
        public EntityCollection<TASK> TASKs
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<TASK>("MtcModel.FK_TaskUser_Id", "TASKs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<TASK>("MtcModel.FK_TaskUser_Id", "TASKs", value);
                }
            }
        }

        #endregion
    }

}

namespace MtcModel
{

    #region TaskType

    /// <summary>
    /// There are no comments for MtcModel.TaskType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="TaskType")]
    [DataContract]
    public enum TaskType : int
    {
    
        /// <summary>
        /// There are no comments for TaskType.Task in the schema.
        /// </summary>
        [EnumMember]
        Task = 1,    
        /// <summary>
        /// There are no comments for TaskType.Bug in the schema.
        /// </summary>
        [EnumMember]
        Bug = 2,    
        /// <summary>
        /// There are no comments for TaskType.Feature in the schema.
        /// </summary>
        [EnumMember]
        Feature = 3
    }
    #endregion

    #region TaskState

    /// <summary>
    /// There are no comments for MtcModel.TaskState in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="TaskState")]
    [DataContract]
    public enum TaskState : int
    {
    
        /// <summary>
        /// There are no comments for TaskState.ToDo in the schema.
        /// </summary>
        [EnumMember]
        ToDo = 1,    
        /// <summary>
        /// There are no comments for TaskState.InProgress in the schema.
        /// </summary>
        [EnumMember]
        InProgress = 2,    
        /// <summary>
        /// There are no comments for TaskState.Done in the schema.
        /// </summary>
        [EnumMember]
        Done = 3,    
        /// <summary>
        /// There are no comments for TaskState.Resolved in the schema.
        /// </summary>
        [EnumMember]
        Resolved = 4,    
        /// <summary>
        /// There are no comments for TaskState.Closed in the schema.
        /// </summary>
        [EnumMember]
        Closed = 5,    
        /// <summary>
        /// There are no comments for TaskState.WontBeDone in the schema.
        /// </summary>
        [EnumMember]
        WontBeDone = 6
    }
    #endregion

    #region ReferenceType

    /// <summary>
    /// There are no comments for MtcModel.ReferenceType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="ReferenceType")]
    [DataContract]
    public enum ReferenceType : int
    {
    
        /// <summary>
        /// There are no comments for ReferenceType.Book in the schema.
        /// </summary>
        [EnumMember]
        Book = 1,    
        /// <summary>
        /// There are no comments for ReferenceType.Article in the schema.
        /// </summary>
        [EnumMember]
        Article = 2,    
        /// <summary>
        /// There are no comments for ReferenceType.Web in the schema.
        /// </summary>
        [EnumMember]
        Web = 3
    }
    #endregion

    #region StructureType

    /// <summary>
    /// There are no comments for MtcModel.StructureType in the schema.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="MtcModel", Name="StructureType")]
    [DataContract]
    public enum StructureType : int
    {
    
        /// <summary>
        /// There are no comments for StructureType.CoverPage in the schema.
        /// </summary>
        [EnumMember]
        CoverPage = 1,    
        /// <summary>
        /// There are no comments for StructureType.Reference in the schema.
        /// </summary>
        [EnumMember]
        Reference = 2,    
        /// <summary>
        /// There are no comments for StructureType.Section in the schema.
        /// </summary>
        [EnumMember]
        Section = 3,    
        /// <summary>
        /// There are no comments for StructureType.Subsection in the schema.
        /// </summary>
        [EnumMember]
        Subsection = 4,    
        /// <summary>
        /// There are no comments for StructureType.Subsubsection in the schema.
        /// </summary>
        [EnumMember]
        Subsubsection = 5
    }
    #endregion

}
