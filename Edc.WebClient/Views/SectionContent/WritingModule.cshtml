@model Edc.WebClient.Models.WriteContentViewModel
@{
    ViewBag.Title = "Писане";
    var keywords = String.Join(",", Model.Keywords.Select(k => k.Name).ToArray());
}
<div class="panel panel-primary">
    <div class="panel-heading"><h3 class="panel-title">@Model.TaskTitle : @Model.SectionTitle</h3></div>
    <div class="panel-body">
        @using (Html.BeginForm("WriteContent", "SectionContent", FormMethod.Post, new { id = "createDocumentForm", @class = "form-horizontal" }))
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Title, new { @class = "col-lg-2 label-panel control-label" })
                <div class="col-lg-9">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = @Model.SectionTitle } })
                </div>
            </div>
   
            <div class="form-group">
                @Html.LabelFor(model => model.Keywords, new { @class = "col-lg-2 label-panel control-label" })
                <div class="col-lg-9">
                    <input type="text" class="form-control" id="tokenfield" name="keywords" value="@keywords"/>
                </div>
                <button type="button" class="btn btn-primary" onclick="getPlaceholderText()"><span class="glyphicon glyphicon-gift" aria-hidden="true"></span></button>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MainText, new { @class = "col-lg-2 label-panel control-label" })
                <div class="col-lg-9">
                    @Html.EditorFor(model => model.MainText, new { htmlAttributes = new { rows = 20, @class = "form-control", @placeholder = @Model.MainText } })
                </div>
            </div>
            <div class="form-group">
                <div class="col-lg-8">
                    <div style="float:left;" class="pull-right">
                        <button type="button" class="btn btn-primary" onclick="getGeneratedSectionDocument(@Model.CurrentSectionContentId, 'txt') ">txt</button>
                        <button type="button" class="btn btn-primary" onclick="getGeneratedSectionDocument(@Model.CurrentSectionContentId, 'docx') ">docx</button>
                        <button type="button" class="btn btn-primary" onclick="getGeneratedSectionDocument(@Model.CurrentSectionContentId, 'pdf') ">pdf</button>
                    </div>
                </div>

                <div class="col-lg-3">
                    <button type="submit" class="btn btn-primary pull-right" id="save">
                        @if (Model.IsDisabled)
                        {
                            <span class="glyphicon glyphicon-backward" aria-hidden="true"></span>
                            <span>Обратно към задачите</span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-save" aria-hidden="true"></span>
                            <span>Запазване</span>
                        }
                    </button>
                </div>
            </div>

            @Html.HiddenFor(x => x.CurrentTaskId, new { id = "CurrentTaskId" })
            @Html.HiddenFor(x => x.CurrentSectionContentId, new { id = "CurrentSectionContentId" })
            @Html.HiddenFor(x => x.IsDisabled, new { id = "IsDisabled" })
            @Html.HiddenFor(x => x.DocumentId, new { id = "DocumentId" })
        }
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/bootstrap-wysiwyg")
    <script>
        function getPlaceholderText() {
            var sectionTitle = $("#Title").val();
            var keywords = $("#tokenfield").val();
            if (sectionTitle.length > 0 && keywords.length > 0) {
                $.getJSON("/SectionContent/GetPlaceholderText?title=" + sectionTitle + "&keywords=" + keywords, function(data) {
                    var mainText = data.placeholdertext;
                    $("#MainText").attr("placeholder", mainText);
                    $("#MainText").val(mainText);
                });
            }
        }

        function getGeneratedSectionDocument(sectionContentId, type) {
            if (type == 'docx') {
                window.location = "/SectionContent/GetDocx?sectionContentId=" + sectionContentId;
            } else if (type == 'txt') {
                window.location = "/SectionContent/GetTxt?sectionContentId=" + sectionContentId;
            } else if (type == 'pdf') {
                window.location = "/SectionContent/GetPdf?sectionContentId=" + sectionContentId;
            }
        }

        $(document).ready(function() {
            if (@Model.IsDisabled.ToString().ToLower() == true) {
                $('#MainText').attr('disabled', 'disabled');
                $('#Title').attr('disabled', 'disabled');
                $('#tokenfield').attr('disabled', 'disabled');
            } else {
                /*
                $('#MainText').wysihtml5({toolbar: {
                    "font-styles": false, //Font styling, e.g. h1, h2, etc.
                    "emphasis":  true, //Italics, bold, etc.
                    "lists": true, //(Un)ordered lists, e.g. Bullets, Numbers.
                    "html": false, //Button which allows you to edit the generated HTML.
                    "link": true, //Button to insert a link.
                    "image": false, //Button to insert an image.
                    'blockquote': false, //Button to insert quotes
                }});*/
            }
            $("#MainText").on('keyup', function() {
                var words = this.value.match(/\S+/g).length;
                if (words > 200) {
                    // Split the string on first 200 words and rejoin on spaces
                    var trimmed = $(this).val().split(/\s+/, 200).join(" ");
                    // Add a space at the end to keep new typing making new words
                    $(this).val(trimmed + " ");
                }
                else {
                    $('#display_count').text(words);
                    $('#word_left').text(200-words);
                }
            });
            $('#tokenfield').tokenfield({
                autocomplete: {
                    source: function(request, response) {
                        $.getJSON("/SectionContent/GetTags?term=" + request.term, function(data) {
                            response($.map(data.keywords, function(value) {
                                return {
                                    label: value.Name,
                                    key: value.Id
                                };
                            }));
                        });
                    },
                    delay: 100
                },
                showAutocompleteOnFocus: true
            });
            //$('#tokenfield').tokenfield('setTokens', @Model.Keywords);
        });
    </script>
}
