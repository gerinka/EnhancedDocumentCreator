@using Edc.Domain.Models
@model Edc.WebClient.Models.TasksBoardViewModel
@{
    ViewBag.Title = "Дъска със задачи";
    int maxTasks = Math.Max(Model.InProgressTasks.Count(), Math.Max(Model.DoneTasks.Count(), Model.ToDoTasks.Count()));
    var maxRows = (int)Math.Ceiling((double)maxTasks / 2);
    var totalTasks = Model.DoneTasks.Count + Model.InProgressTasks.Count + Model.ToDoTasks.Count;
}
<div class="row">
    <div class="col-lg-4">
    </div>
    <div class="col-lg-4">
        @if (totalTasks > 0)
        {
            <p class="text-primary text-center">
                <em>@Model.DocumentTopic</em>
                <a href="@Url.Action("UpdateDocumentSettings", "Document", new { documentId = @Model.DocumentId }, null)">
                    <span class="glyphicon glyphicon-cog" aria-hidden="true"></span>
                </a>
            </p>
        }
    </div>
    <div class="col-lg-4">
        @if (totalTasks > 0)
        {
           <!--<p class="text-right text-muted small">Генериране на документ</p>-->
            <div style="float: left;" class="pull-right">
                <button type="button" class="btn btn-primary" onclick="getGeneratedDocument(@Model.DocumentId, 'txt') "><span class="glyphicon glyphicon-export" aria-hidden="true"></span> txt</button>
                @if (!(Model.InProgressTasks.Any() || Model.ToDoTasks.Any()) && Model.DoneTasks.Any())
                {
                    <button type="button" class="btn btn-primary" onclick="getGeneratedDocument(@Model.DocumentId, 'docx') "><span class="glyphicon glyphicon-export" aria-hidden="true"></span> docx</button>
                    <button type="button" class="btn btn-primary" onclick="getGeneratedDocument(@Model.DocumentId, 'pdf') "><span class="glyphicon glyphicon-export" aria-hidden="true"></span> pdf</button>
                }
            </div>
        }
    </div>
</div>
@if (totalTasks > 0)
{
    <div class="row">
        <div class="col-lg-4">
            <h3 class="text-center"><span class="label label-default"><span class="glyphicon glyphicon-stop" aria-hidden="true"></span> Незапочнати задачи</span></h3>
        </div>
        <div class="col-lg-4">
            <h3 class="text-center"><span class="label label-warning"><span class="glyphicon glyphicon-play" aria-hidden="true"></span> Задачи в процес</span></h3>
        </div>
        <div class="col-lg-4">
            <h3 class="text-center"><span class="label label-success"><span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Завършени задачи</span></h3>
        </div>
    </div>
}
else if (!Model.DocumentIsActive && Model.DocumentId > 0)
{
    <div class="row">
        <div class="col-lg-3">
        </div>
        <div class="col-lg-6">
            <h1 class="text-center"><span class="label label-warning">Този документ е маркиран като отказан</span></h1>
            <p class="text-center">Отидете на @Html.ActionLink("Дъска със задачи", "TaskBoard", "Tasks"), за да завършите настоящия си документ, ако имате.</p>
            <p class="text-center">Върнете се на @Html.ActionLink("Генерирай структура", "GenerateMainStructure", "Document"), за да започнете нова разработка</p>
        </div>
        <div class="col-lg-3">
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-4">
        </div>
        <div class="col-lg-4">
            <h1 class="text-center"><span class="label label-warning">Нямате започнат документ</span></h1>
            <p class="text-center">Върнете се на @Html.ActionLink("Генерирай структура", "GenerateMainStructure", "Document"), за да започнете работа</p>
        </div>
        <div class="col-lg-4">
        </div>
    </div>
}
@for (int i = 0; i < maxRows; i++)
{
    <div class="row">
        @if (Model.ToDoTasks.Count() - i * 2 > 0)
        {
            Task task = Model.ToDoTasks[i * 2];
            <div class="col-lg-4">
                <div class="col-lg-6">
                    <div class="panel @task.TaskState.ToString().ToLower()">
                        <div class="panel-heading">@task.Number) @task.Title <span class="glyphicon @task.TaskState.ToString().ToLower()-icon pull-right" aria-hidden="true"></span></div>
                        <div class="panel-body taskbody"
                             data-toggle="modal"
                             data-target="#taskModal"
                             data-taskid="@task.Id"
                             data-tasktitle="@task.Title"
                             data-subtitle="@task.Section.Content.Title"
                             data-action="@task.TaskAction.ToString()"
                             data-taskstate="@task.TaskState.ToString().ToLower()"
                             data-deadline="@task.Deadline">
                            <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                            @task.Section.Content.Title
                            <span class="badge current-progress pull-right badge-@task.Section.Content.CurrentProgress">@task.Section.Content.CurrentProgress</span>
                        </div>
                    </div>
                </div>
                @if (Model.ToDoTasks.Count() >= (i + 1) * 2)
                {
                    task = Model.ToDoTasks[i * 2 + 1];
                    <div class="col-lg-6">
                        <div class="panel @task.TaskState.ToString().ToLower()">
                            <div class="panel-heading">@task.Number) @task.Title <span class="glyphicon @task.TaskState.ToString().ToLower()-icon pull-right" aria-hidden="true"></span></div>
                            <div class="panel-body taskbody"
                                 data-toggle="modal"
                                 data-target="#taskModal"
                                 data-taskid="@task.Id"
                                 data-tasktitle="@task.Title"
                                 data-subtitle="@task.Section.Content.Title"
                                 data-action="@task.TaskAction.ToString()"
                                 data-taskstate="@task.TaskState.ToString().ToLower()"
                                 data-deadline="@task.Deadline">
                                <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                                @task.Section.Content.Title
                                <span class="badge pull-right current-progress badge-@task.Section.Content.CurrentProgress">@task.Section.Content.CurrentProgress</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-lg-6"></div>
                }
            </div>
        }
        else
        {
            <div class="col-lg-4">
                <div class="col-lg-6"></div>
                <div class="col-lg-6"></div>
            </div>
        }
        @if (Model.InProgressTasks.Count() - i * 2 > 0)
        {
            Task task = Model.InProgressTasks[i * 2];
            <div class="col-lg-4">
                <div class="col-lg-6">
                    <div class="panel @task.TaskState.ToString().ToLower()">
                        <div class="panel-heading">@task.Number) @task.Title <span class="glyphicon @task.TaskState.ToString().ToLower()-icon pull-right" aria-hidden="true"></span></div>
                        <div class="panel-body taskbody"
                             data-toggle="modal"
                             data-target="#taskModal"
                             data-taskid="@task.Id"
                             data-tasktitle="@task.Title"
                             data-subtitle="@task.Section.Content.Title"
                             data-action="@task.TaskAction.ToString()"
                             data-taskstate="@task.TaskState.ToString().ToLower()"
                             data-deadline="@task.Deadline">
                            <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                            @task.Section.Content.Title
                            <span class="badge pull-right current-progress badge-@task.Section.Content.CurrentProgress">@task.Section.Content.CurrentProgress</span>
                        </div>
                    </div>
                </div>
                @if (Model.InProgressTasks.Count() >= (i + 1) * 2)
                {
                    task = Model.InProgressTasks[i * 2 + 1];
                    <div class="col-lg-6">
                        <div class="panel @task.TaskState.ToString().ToLower()">
                            <div class="panel-heading">@task.Number) @task.Title <span class="glyphicon @task.TaskState.ToString().ToLower()-icon pull-right" aria-hidden="true"></span></div>
                            <div class="panel-body taskbody"
                                 data-toggle="modal"
                                 data-target="#taskModal"
                                 data-taskid="@task.Id"
                                 data-tasktitle="@task.Title"
                                 data-subtitle="@task.Section.Content.Title"
                                 data-action="@task.TaskAction.ToString()"
                                 data-taskstate="@task.TaskState.ToString().ToLower()"
                                 data-deadline="@task.Deadline">
                                <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                                @task.Section.Content.Title
                                <span class="badge pull-right current-progress badge-@task.Section.Content.CurrentProgress">@task.Section.Content.CurrentProgress</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-lg-6"></div>
                }
            </div>
        }
        else
        {
            <div class="col-lg-4">
                <div class="col-lg-6"></div>
                <div class="col-lg-6"></div>
            </div>
        }
        @if (Model.DoneTasks.Count() - i * 2 > 0)
        {
            Task task = Model.DoneTasks[i * 2];
            <div class="col-lg-4">
                <div class="col-lg-6">
                    <div class="panel @task.TaskState.ToString().ToLower()">
                        <div class="panel-heading">@task.Number) @task.Title <span class="glyphicon @task.TaskState.ToString().ToLower()-icon pull-right" aria-hidden="true"></span></div>
                        <div class="panel-body taskbody"
                             data-toggle="modal"
                             data-target="#taskModal"
                             data-taskid="@task.Id"
                             data-tasktitle="@task.Title"
                             data-subtitle="@task.Section.Content.Title"
                             data-action="@task.TaskAction.ToString()"
                             data-taskstate="@task.TaskState.ToString().ToLower()"
                             data-deadline="@task.Deadline">
                            <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                            @task.Section.Content.Title
                            <span class="badge pull-right current-progress badge-@task.Section.Content.CurrentProgress">@task.Section.Content.CurrentProgress</span>
                        </div>
                    </div>
                </div>
                @if (Model.DoneTasks.Count() >= (i + 1) * 2)
                {
                    task = Model.DoneTasks[i * 2 + 1];
                    <div class="col-lg-6">
                        <div class="panel @task.TaskState.ToString().ToLower()">
                            <div class="panel-heading">@task.Number) @task.Title <span class="glyphicon @task.TaskState.ToString().ToLower()-icon pull-right" aria-hidden="true"></span></div>
                            <div class="panel-body taskbody"
                                 data-toggle="modal"
                                 data-target="#taskModal"
                                 data-taskid="@task.Id"
                                 data-tasktitle="@task.Title"
                                 data-subtitle="@task.Section.Content.Title"
                                 data-action="@task.TaskAction.ToString()"
                                 data-taskstate="@task.TaskState.ToString().ToLower()"
                                 data-deadline="@task.Deadline">
                                <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                                @task.Section.Content.Title
                                <span class="badge pull-right current-progress badge-@task.Section.Content.CurrentProgress">@task.Section.Content.CurrentProgress</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-lg-6"></div>
                }
            </div>
        }
        else
        {
            <div class="col-lg-4">
                <div class="col-lg-6"></div>
                <div class="col-lg-6"></div>
            </div>
        }
    </div>
}
<!-- Modal -->
<div id="taskModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content" id="modal-content">
            <div class="modal-header panel-heading">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Заглавие</h4>

            </div>
            <div class="modal-body">
                <label id="error-message" class="label label-danger"></label>
                <p id="modal-text" style="margin-left: 10px">Описание.</p>
                <p><span id="deadline">Краен срок</span> <span id="modal-icon" class="glyphicon pull-right" aria-hidden="true"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Затвори</button>
                <button type="button" class="btn btn-primary" id="goToWritingModule" value="3" data-disabled="false" onclick="navigateToWritingModule(this)">Продължи с писането</button>
                <button type="submit" class="btn btn-primary" id="action" value="3" data-action="action">Действие</button>
            </div>
        </div>

    </div>
</div>
@section scripts{
    <script>
        function navigateToWritingModule(button) {
            var goToButton = $(button);
            var currentTaskId = goToButton.prop('value');
            var disabled = goToButton.data('disabled');
            window.location.href = '@Url.Action("GoToWritingModule", "SectionContent")?taskId=' + currentTaskId + '&isDisabled=' + disabled;
        };

        function getGeneratedDocument(documentId, type) {
            if (type == 'docx') {
                window.location = "/Tasks/GetDocxDocument?documentId=" + documentId;
            } else if (type == 'txt') {
                window.location = "/Tasks/GetTxtDocument?documentId=" + documentId;
            } else if (type == 'pdf') {
                window.location = "/Tasks/GetPdfDocument?documentId=" + documentId;
            }
        }

        $(document).ready(function() {
            $('#taskModal').on('show.bs.modal', function(event) {
                $("#error-message").text("");
                var button = $(event.relatedTarget); // Button that triggered the modal
                var taskId = button.data('taskid');
                var title = button.data('tasktitle');
                var subtitle = button.data('subtitle');
                var taskaction = button.data('action');
                var taskstate = button.data('taskstate');
                var deadline = button.data('deadline');
                var modal = $(this);
                var actionButton = modal.find('#action');
                var goToWritingModuleButton = modal.find('#goToWritingModule');
                modal.find('.modal-title').text(title);

                modal.find("#modal-content").removeClass();
                modal.find("#modal-content").addClass("modal-content");
                modal.find('#modal-content').addClass(taskstate);

                modal.find("#modal-icon").removeClass();
                modal.find('#modal-icon').addClass("glyphicon pull-right");
                modal.find('#modal-icon').addClass(taskstate + '-icon');

                if (taskaction == 'Start') {
                    modal.find('.modal-body p#modal-text').text('Започни писане на "' + title + '" - ' + subtitle + '".');
                    modal.find('#deadline').text('Краен срок: ' + deadline);

                    actionButton.removeClass('hidden');
                    actionButton.text('Започни');
                    actionButton.prop('value', taskId);

                    goToWritingModuleButton.addClass('hidden');
                    goToWritingModuleButton.prop('value', taskId);
                    goToWritingModuleButton.data('disabled', 'false');
                } else if (taskaction == 'Finish') {
                    modal.find('.modal-body p#modal-text').text('Завърши писане на "' + title + ' - ' + subtitle + '".');
                    modal.find('#deadline').text('Краен срок: ' + deadline);

                    actionButton.text('Завърши');
                    actionButton.prop('value', taskId);
                    actionButton.removeClass('hidden');

                    goToWritingModuleButton.text('Продължи с писането');
                    goToWritingModuleButton.removeClass('hidden');
                    goToWritingModuleButton.prop('value', taskId);
                    goToWritingModuleButton.data('disabled', 'false');
                } else if (taskaction == 'Nothing') {
                    modal.find('.modal-body p#modal-text').text('Секция "' + title + ' - ' + subtitle + '" е завършена.');
                    modal.find('#deadline').text('Краен срок: ' + deadline);

                    actionButton.addClass('hidden');
                    actionButton.prop('value', taskId);

                    goToWritingModuleButton.removeClass('hidden');
                    goToWritingModuleButton.prop('value', taskId);
                    goToWritingModuleButton.text('Виж написаното');
                    goToWritingModuleButton.data('disabled', 'true');
                } else if (taskaction == 'Locked') {
                    modal.find('.modal-body p#modal-text').text('Тази секция е заключена. Завърши предходните, за да я отключиш!');
                    modal.find('#deadline').text('Краен срок: ' + deadline);

                    actionButton.addClass('hidden');
                    actionButton.prop('value', taskId);

                    goToWritingModuleButton.addClass('hidden');
                    goToWritingModuleButton.prop('value', taskId);
                }
                actionButton.data('action', taskaction);
            });

            $('#action').click(function(e) {
                e.preventDefault(); // <------------------ stop default behaviour of button

                var buttonAction = $(this);
                var taskId = buttonAction.prop('value');
                var action = buttonAction.data('action');
                $.ajax({
                    url: "/Tasks/" + action + "Task/",
                    type: "POST",
                    data: JSON.stringify({ 'taskId': taskId }),
                    dataType: "json",
                    traditional: true,
                    contentType: "application/json; charset=utf-8",
                    success: function(data) {
                        if (data.Success) {
                            window.location.href = data.Message;
                        } else {
                            $("#error-message").text(data.Message);
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        if (xhr.status == 417) {
                            $("#error-message").text("Задачата не може да се финишира все още!");
                        }
                    }
                });
            });
        });
    </script>
}